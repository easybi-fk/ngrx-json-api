{"version":3,"sources":["../../src/utils.ts","../../src/selectors.ts","../../src/reducers.ts","../../src/module.ts","../../src/interfaces.ts","../../src/actions.ts","../../src/services.ts","../../src/pipes.ts","../../src/api.ts","../../src/effects.ts"],"names":["setIn","state","path","value","_.get","_.setWith","_.clone","nsValue","key","nsObject","newObject","rollbackResource","newState","type","id","storeResource","persistedResource","__assign","resource","collectPendingChange","pending","include","includeNew","push","_i","include_1","length","includeElement","relationshipName_1","relationships","data","relationInclude_1","filter","relIncludeElem","forEach","slice","_.isArray","relationId","getPendingChanges","ids","_.isUndefined","Object","keys","relationshipInclusions","include_2","split","_a","ids_1","_.uniqBy","e","selectNgrxJson","state$","pipe","select","map","it","selectNgrxJsonApiDefaultZone","selectNgrxJsonApiZone","NGRX_JSON_API_DEFAULT_ZONE","zoneId","let","zones","getNgrxJsonApiZone","selectStoreQuery","queryId","queries","selectStoreResourcesOfType","undefined","selectStoreResource","identifier","resources","selectStoreResources","identifiers","selectManyQueryResult","denormalize","storeQuery","_.isEmpty","resultIds","results","denormaliseStoreResources","selectOneQueryResult","queryResult","Error","query","resultId","result","denormaliseStoreResource","getNgrxJsonApiStore","NgrxJsonApiStoreReducer","action","initialNgrxJsonApiState","zone","initialNgrxJsonApiZone","newZone","NgrxJsonApiZoneReducer","NgrxJsonApiActionTypes","API_POST_INIT","updatedData","updateStoreDataFromResource","payload","isCreating","API_GET_INIT","updateQueryParams","isReading","API_PATCH_INIT","isUpdating","API_DELETE_INIT","updateResourceState","isDeleting","API_POST_SUCCESS","updateStoreDataFromPayload","jsonApiData","API_GET_SUCCESS","updateQueryResults","API_PATCH_SUCCESS","API_DELETE_SUCCESS","deleteStoreResources","updateQueriesForDeletedResource","API_QUERY_REFRESH","clearQueryResult","API_POST_FAIL","updateResourceErrorsForQuery","API_GET_FAIL","updateQueryErrors","API_PATCH_FAIL","API_DELETE_FAIL","REMOVE_QUERY","removeQuery","LOCAL_QUERY_INIT","MODIFY_STORE_RESOURCE_ERRORS","updateResourceErrors","resourceId","errors","modificationType","LOCAL_QUERY_SUCCESS","PATCH_STORE_RESOURCE","POST_STORE_RESOURCE","NEW_STORE_RESOURCE","DELETE_STORE_RESOURCE","removeStoreResource","API_APPLY_INIT","pending_2","isApplying","pending_1","pendingChange","API_APPLY_SUCCESS","API_APPLY_FAIL","actions","actions_1","API_ROLLBACK","rollbackStoreResources","CLEAR_STORE","COMPACT_STORE","compactStore","apiFactory","http","config","NgrxJsonApi","selectorsFactory","NgrxJsonApiSelectors","serviceFactory","store","NgrxJsonApiService","configure","provide","useFactory","deps","HttpClient","NGRX_JSON_API_CONFIG","Store","useValue","ASC","DESC","Direction","denormaliseObject","storeData","bag","denormalizePersisted","hasOwnProperty","relationshipName","orginalRelationship","denormalizedRelation","relatedRSs","getMultipleStoreResource","r","relatedRS","getSingleStoreResource","relationship","items","items_1","item","resourceIds","getDenormalisedPath","baseResourceType","resourceDefinitions","pathSeparator","denormPath","fields","currentResourceType","i","definition","_.find","attributes","resourceRelation","relationType","join","getDenormalisedValue","denormalisedPath","updateResourceObject","original","source","customizer","objValue","srcValue","_.mergeWith","insertStoreResource","storeResources","fromServer","newStoreResources","loading","_.isEqual","resourceState","newState_1","isEqualResource","resource0","resource1","meta","links","updateStoreResource","newResource","newResourceState","foundStoreResource","mergedResource","deletedId","queryState","notFoundError","code","status","document","Array","apply","currentErrors","_b","_c","currentErrors_1","currentError","modifiedResources","modifiedResources_1","modifiedResource","_.omit","newQuery","override","newStoreData","updatedStoreResources","included","concat","hasChange","resources_1","storeQueries","newStoreQuery","_.cloneDeep","newStoreQueries","newQueryStore","toResourceIdentifier","getResourceFieldValueFromPath","baseStoreResource","currentStoreResource","relation","relatedPath","filterResources","filteringConfig","_.filter","params","filtering","every","element","filteringOperators","resourceFieldValue","operator","name","comparison","_.isString","toLowerCase","_.includes","_.startsWith","_.endsWith","generateIncludedQueryParams","generateFieldsQueryParams","generateFilteringQueryParams","f","encodeURIComponent","generateSortingQueryParams","sorting","direction","api","generateQueryParams","arguments","newParams","p","generatePayload","operation","hasTemporaryId","isMetaOnly","uuid","lut","toString","d0","Math","random","d1","d2","d3","toKey","collectQueryResults","usedResources","queryName","collectPendingChanges","collectReferencesForResource","hasChanges","dependencyIds","dependencyIds_1","dependencyId","dependencyKey","collectReferences","sweepUnusedResources","hasDeletions","sortPendingChanges","pendingResources","dependencies","pendingMap","pendingResources_1","pendingResource","pendingResources_2","key_1","dependencyIds_2","context","cursor","sorted","visited","visitPending","reverse","predecessors","indexOf","JSON","stringify","outgoing","preds","outgoing_1","child","prototype","getNgrxJsonApiStore$","getStoreData$","getStoreResourceOfType$","_this","getStoreQueries$","getResourceQuery$","getStoreResource$","getManyResults$","getOneResult$","getPersistedResource$","LOCAL_QUERY_FAIL","NgrxJsonApiAction","ApiApplyInitAction","_super","call","this","__extends","ApiApplySuccessAction","ApiApplyFailAction","ApiPostInitAction","ApiPostSuccessAction","ApiPostFailAction","ApiDeleteInitAction","ApiDeleteSuccessAction","ApiDeleteFailAction","ApiGetInitAction","ApiGetSuccessAction","ApiGetFailAction","ApiRollbackAction","ApiPatchInitAction","ApiPatchSuccessAction","ApiPatchFailAction","DeleteStoreResourceAction","PatchStoreResourceAction","NewStoreResourceAction","PostStoreResourceAction","RemoveQueryAction","LocalQueryInitAction","LocalQuerySuccessAction","LocalQueryFailAction","CompactStoreAction","ClearStoreAction","ApiQueryRefreshAction","ModifyStoreResourceErrorsAction","NgrxJsonApiZoneService","putQuery","options","dispatch","refreshQuery","selectManyResults","selectOneResults","patchResource","toRemote","postResource","deleteResource","clear","compact","addResourceErrors","removeResourceErrors","setResourceErrors","test","getDefaultZone","getZone","findOne","findInternal","findMany","defineProperty","_storeSnapshot","subscribe","multi","denormalise","queryResult$","finally","getPersistedResourceSnapshot","snapshot","storeSnapshot","getResourceSnapshot","denormaliseResource","storeResource$","combineLatest","resourceType","SelectStoreResourcePipe","service","transform","Pipe","args","SelectStoreResourcesPipe","DenormaliseStoreResourcePipe","obs","GetDenormalisedValuePipe","headers","HttpHeaders","Content-Type","Accept","definitions","requestHeaders","_.keys","name_1","set","urlBuilder","resourceUrlFor","collectionUrlFor","collectionPathFor","collectionPath","apiUrl","resourcePathFor","resourcePath","find","_generateIncludedQueryParams","_generateFilteringQueryParams","_generateFieldsQueryParams","_generateSortingQueryParams","_generateQueryParams","queryParams","includedParam","filteringParams","sortingParams","fieldsParams","offsetParams","limitParams","pageParams","Observable","throw","_.hasIn","limit","offset","page","requestOptions","method","url","request","create","body","update","delete","newRequestOptions","observe","withCredentials","requestWithCredentials","init","__rest","get","post","patch","NgrxJsonApiEffects","actions$","jsonApi","createResource$","ofType","mergeMap","response","catchError","error","of","toErrorPayload","updateResource$","readResource$","queryStore$","executeLocalQuery","takeUntil","localQueryInitEventFor","removeQueryEventFor","deleteResource$","triggerReadOnQueryRefresh$","withLatestFrom","refreshQueriesOnDelete$","needsRefresh","_.findIndex","o","sameIdRequested","flatMap","applyResources$","applyEnabled","storeState","ngrxstore","sortedPending","sortedPending_1","handlePendingCreate","handlePendingUpdate","handlePendingDelete","concatAll","toArray","toApplyAction","selected$","distinctUntilChanged","ngOnDestroy","contentType","startsWith","String","statusText","Injectable","Actions","Effect","__metadata","reducer","InjectionToken","NgrxJsonApiModule","ngModule","providers","NgModule","declarations","imports","EffectsModule","forFeature","StoreModule","exports"],"mappings":"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","file":"./dist/bundles/ngrx-json-api.umd.min.js","sourcesContent":["import * as _ from 'lodash';\n\nimport { Actions } from '@ngrx/effects';\n\nimport {\n  Direction,\n  Document,\n  FilteringOperator,\n  FilteringParam,\n  NgrxJsonApiFilteringConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiStoreQueries,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceDefinition,\n  ResourceIdentifier,\n  ResourceError,\n  ResourceState,\n  StoreQuery,\n  SortingParam,\n  StoreResource,\n  ErrorModificationType,\n} from './interfaces';\n\nexport function setIn(state: any, path: string, value: any) {\n  let currentValue = _.get(state, path);\n  if (value === currentValue) {\n    return state;\n  }\n  return _.setWith(\n    _.clone(state),\n    path,\n    value,\n    (nsValue: any, key: string, nsObject: any) => {\n      const newObject = _.clone(nsObject);\n      newObject[key] = nsValue;\n      return newObject;\n    }\n  );\n}\n\nexport const denormaliseObject = (\n  resource: Resource,\n  storeData: NgrxJsonApiStoreData,\n  bag: NgrxJsonApiStoreData,\n  denormalizePersisted: boolean = false\n): any => {\n  // this function MUST MUTATE resource\n  if (resource.hasOwnProperty('relationships')) {\n    Object.keys(resource.relationships).forEach(relationshipName => {\n      const orginalRelationship = resource.relationships[relationshipName];\n\n      let data: ResourceIdentifier | Array<ResourceIdentifier> =\n        orginalRelationship.data;\n      if (!_.isUndefined(data)) {\n        let denormalizedRelation;\n        if (data === null) {\n          denormalizedRelation = data;\n        } else if (!_.isArray(data)) {\n          // one relation\n          let relatedRS = getSingleStoreResource(\n            <ResourceIdentifier>data,\n            storeData\n          );\n          denormalizedRelation = denormaliseStoreResource(\n            relatedRS,\n            storeData,\n            bag,\n            denormalizePersisted\n          );\n        } else if ((data as Array<ResourceIdentifier>).length == 0) {\n          denormalizedRelation = data;\n        } else {\n          // many relation\n          let relatedRSs: Array<StoreResource> = getMultipleStoreResource(\n            <ResourceIdentifier[]>data,\n            storeData\n          );\n          denormalizedRelation = relatedRSs.map(r =>\n            denormaliseStoreResource(r, storeData, bag, denormalizePersisted)\n          );\n        }\n\n        const relationship = { ...orginalRelationship };\n        relationship['reference'] = denormalizedRelation;\n        resource.relationships[relationshipName] = relationship;\n      }\n    });\n  }\n  return resource;\n};\n\nexport const denormaliseStoreResources = (\n  items: Array<StoreResource>,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {},\n  denormalizePersisted: boolean = false\n): Array<StoreResource> => {\n  let results: Array<StoreResource> = [];\n  for (let item of items) {\n    results.push(\n      denormaliseStoreResource(item, storeData, bag, denormalizePersisted)\n    );\n  }\n  return results;\n};\n\nexport const denormaliseStoreResource = (\n  item: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  bag: any = {},\n  denormalizePersisted: boolean = false\n): any => {\n  if (!item) {\n    return null;\n  }\n  if (_.isUndefined(bag[item.type])) {\n    bag[item.type] = {};\n  }\n  if (_.isUndefined(bag[item.type][item.id])) {\n    let storeResource: StoreResource = { ...item };\n    if (item.relationships) {\n      storeResource.relationships = { ...item.relationships };\n    }\n\n    bag[storeResource.type][storeResource.id] = storeResource;\n    storeResource = denormaliseObject(\n      storeResource,\n      storeData,\n      bag,\n      denormalizePersisted\n    );\n    if (storeResource.persistedResource && denormalizePersisted) {\n      storeResource.persistedResource = denormaliseObject(\n        storeResource.persistedResource,\n        storeData,\n        bag,\n        denormalizePersisted\n      );\n    }\n  }\n\n  return bag[item.type][item.id];\n};\n\nexport const getSingleStoreResource = (\n  resourceId: ResourceIdentifier,\n  storeData: NgrxJsonApiStoreData\n): StoreResource => {\n  return _.get(storeData, [resourceId.type, resourceId.id], null);\n};\n\nexport const getMultipleStoreResource = (\n  resourceIds: Array<ResourceIdentifier>,\n  resources: NgrxJsonApiStoreData\n): Array<StoreResource> => {\n  return resourceIds.map(id => getSingleStoreResource(id, resources));\n};\n\nexport const getDenormalisedPath = (\n  path: string,\n  baseResourceType: string,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n): string => {\n  let denormPath: string[] = [];\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentResourceType = baseResourceType;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, { type: currentResourceType });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (definition.attributes.hasOwnProperty(fields[i])) {\n      denormPath.push('attributes', fields[i]);\n      break;\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        if (i !== fields.length - 1) {\n          throw new Error('Cannot filter past a hasMany relation');\n        } else {\n          denormPath.push('relationships', fields[i], 'reference');\n        }\n      } else {\n        currentResourceType = resourceRelation.type;\n        denormPath.push('relationships', fields[i], 'reference');\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n  }\n  return denormPath.join(pathSeparator);\n};\n\nexport const getDenormalisedValue = (\n  path: string,\n  storeResource: StoreResource,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  let denormalisedPath = getDenormalisedPath(\n    path,\n    storeResource.type,\n    resourceDefinitions,\n    pathSeparator\n  );\n  return _.get(storeResource, denormalisedPath);\n};\n\n/**\n * Given two objects, it will merge the second in the first.\n *\n */\nexport const updateResourceObject = (\n  original: Resource,\n  source: Resource\n): Resource => {\n  // by default arrays would make use of concat.\n  function customizer(objValue: any, srcValue: any) {\n    if (_.isArray(objValue)) {\n      return srcValue;\n    }\n  }\n\n  return _.mergeWith({}, original, source, customizer);\n};\n\n/**\n * Insert a StoreResource given the Resource and the StoreResources\n *\n */\nexport const insertStoreResource = (\n  storeResources: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let newStoreResources = { ...storeResources };\n  if (fromServer) {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  } else {\n    newStoreResources[resource.id] = {\n      ...resource,\n      persistedResource: null,\n      state: 'CREATED',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n  }\n  return _.isEqual(storeResources, newStoreResources)\n    ? storeResources\n    : newStoreResources;\n};\n\n/**\n * Removes a StoreResource given the Resource and the StoreResources\n *\n */\nexport const removeStoreResource = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier\n): NgrxJsonApiStoreData => {\n  if (storeData[resourceId.type][resourceId.id]) {\n    let newState: NgrxJsonApiStoreData = { ...storeData };\n    newState[resourceId.type] = { ...newState[resourceId.type] };\n    delete newState[resourceId.type][resourceId.id];\n    return newState;\n  }\n  return storeData;\n};\n\n/**\n * Updates the state of a StoreResource in the store.\n *\n * @param storeData\n * @param resourceId\n * @param resourceState\n * @param loading\n * @returns\n */\nexport const updateResourceState = (\n  storeData: NgrxJsonApiStoreData,\n  resourceId: ResourceIdentifier,\n  resourceState?: ResourceState,\n  loading?: OperationType\n): NgrxJsonApiStoreData => {\n  if (\n    _.isUndefined(storeData[resourceId.type]) ||\n    _.isUndefined(storeData[resourceId.type][resourceId.id])\n  ) {\n    if (resourceState === 'DELETED') {\n      let newState: NgrxJsonApiStoreData = { ...storeData };\n      newState[resourceId.type] = { ...newState[resourceId.type] };\n      newState[resourceId.type][resourceId.id] = {\n        ...newState[resourceId.type][resourceId.id],\n      };\n      newState[resourceId.type][resourceId.id] = {\n        type: resourceId.type,\n        id: resourceId.id,\n        persistedResource: null,\n      } as StoreResource;\n      newState[resourceId.type][resourceId.id].state = 'NOT_LOADED';\n      return newState;\n    } else {\n      return storeData;\n    }\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[resourceId.type] = { ...newState[resourceId.type] };\n  newState[resourceId.type][resourceId.id] = {\n    ...newState[resourceId.type][resourceId.id],\n  };\n  if (resourceState !== null) {\n    newState[resourceId.type][resourceId.id].state = resourceState;\n  }\n  if (loading != null) {\n    newState[resourceId.type][resourceId.id].loading = loading;\n  }\n  return newState;\n};\n\n/**\n * Check equality of resource and ignore additional contents used by the\n * store (state, persistedResource, etc.)\n * @param resource0\n * @param resource1\n * @returns\n */\nexport const isEqualResource = (\n  resource0: Resource,\n  resource1: Resource\n): boolean => {\n  if (resource0 === resource1) {\n    return true;\n  }\n  if ((resource0 !== null) !== (resource1 !== null)) {\n    return false;\n  }\n\n  return (\n    _.isEqual(resource0.id, resource1.id) &&\n    _.isEqual(resource0.type, resource1.type) &&\n    _.isEqual(resource0.attributes, resource1.attributes) &&\n    _.isEqual(resource0.meta, resource1.meta) &&\n    _.isEqual(resource0.links, resource1.links) &&\n    _.isEqual(resource0.relationships, resource1.relationships)\n  );\n};\n\nexport const updateStoreResource = (\n  state: NgrxJsonApiStoreResources,\n  resource: Resource,\n  fromServer: boolean\n): NgrxJsonApiStoreResources => {\n  let foundStoreResource = state[resource.id];\n  let persistedResource = state[resource.id].persistedResource;\n\n  let newResource: Resource;\n  let newResourceState: ResourceState;\n  if (fromServer) {\n    // form server, override everything\n    // TODO need to handle check and keep local updates?\n    newResource = resource;\n    persistedResource = resource;\n    newResourceState = 'IN_SYNC';\n  } else {\n    let mergedResource = updateResourceObject(foundStoreResource, resource);\n    if (isEqualResource(mergedResource, persistedResource)) {\n      // no changes anymore, do nothing\n      newResource = persistedResource;\n      newResourceState = 'IN_SYNC';\n    } else {\n      // merge changes and mark as CREATED or UPDATED depending on whether\n      // an original version is available\n      newResource = mergedResource;\n      if (persistedResource !== null) {\n        newResourceState = 'UPDATED';\n      } else if (foundStoreResource.state === 'NEW') {\n        newResourceState = 'NEW';\n      } else {\n        newResourceState = 'CREATED';\n      }\n    }\n  }\n\n  let newState = { ...state };\n  newState[resource.id] = {\n    ...newResource,\n    persistedResource: persistedResource,\n    state: newResourceState,\n    errors: [],\n    loading: false,\n  } as StoreResource;\n\n  return _.isEqual(newState[resource.id], state[resource.id])\n    ? state\n    : newState;\n};\n\nexport const updateQueriesForDeletedResource = (\n  state: NgrxJsonApiStoreQueries,\n  deletedId: ResourceIdentifier\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = state;\n  for (let queryId in state) {\n    if (state.hasOwnProperty(queryId)) {\n      let queryState = state[queryId];\n      if (\n        queryState.query.id === deletedId.id &&\n        queryState.query.type === deletedId.type\n      ) {\n        // found a query for a resource that was deleted => modify to 404\n        newState = clearQueryResult(newState, queryState.query.queryId);\n        let notFoundError: ResourceError = { code: '404', status: 'Not Found' };\n        newState[queryState.query.queryId].errors = [notFoundError];\n      }\n    }\n  }\n  return newState;\n};\n\nexport const updateResourceErrorsForQuery = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  document: Document\n): NgrxJsonApiStoreData => {\n  if (!query.type || !query.id || document.data instanceof Array) {\n    throw new Error('invalid parameters');\n  }\n  return updateResourceErrors(\n    storeData,\n    { id: query.id, type: query.type },\n    document.errors,\n    'SET'\n  );\n};\n\nexport const updateResourceErrors = (\n  storeData: NgrxJsonApiStoreData,\n  id: ResourceIdentifier,\n  errors: Array<ResourceError>,\n  modificationType: ErrorModificationType\n): NgrxJsonApiStoreData => {\n  if (!storeData[id.type] || !storeData[id.type][id.id]) {\n    return storeData;\n  }\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n  newState[id.type] = { ...newState[id.type] };\n  let storeResource = { ...newState[id.type][id.id] };\n\n  if (modificationType === 'SET') {\n    storeResource.errors = [];\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else if (modificationType === 'ADD') {\n    let currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      storeResource.errors.push(...currentErrors);\n    }\n    if (errors) {\n      storeResource.errors.push(...errors);\n    }\n  } else {\n    let currentErrors = storeResource.errors;\n    storeResource.errors = [];\n    if (currentErrors) {\n      for (let currentError of currentErrors) {\n        let remove =\n          errors && errors.filter(it => _.isEqual(it, currentError)).length > 0;\n        if (!remove) {\n          storeResource.errors.push(currentError);\n        }\n      }\n    }\n  }\n  newState[id.type][id.id] = storeResource;\n  return newState;\n};\n\nfunction rollbackResource(\n  newState: NgrxJsonApiStoreData,\n  type: string,\n  id: string\n) {\n  let storeResource = newState[type][id];\n  if (!storeResource.persistedResource) {\n    delete newState[type][id];\n  } else if (storeResource.state !== 'IN_SYNC') {\n    newState[type][id] = <StoreResource>{\n      ...newState[type][id],\n      state: 'IN_SYNC',\n      resource: newState[type][id].persistedResource,\n    };\n  }\n}\n\nexport const rollbackStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>\n): NgrxJsonApiStoreData => {\n  let newState: NgrxJsonApiStoreData = { ...storeData };\n\n  if (_.isUndefined(ids)) {\n    Object.keys(newState).forEach(type => {\n      newState[type] = { ...newState[type] };\n      Object.keys(newState[type]).forEach(id => {\n        rollbackResource(newState, type, id);\n      });\n    });\n  } else {\n    let modifiedResources = getPendingChanges(newState, ids, include, true);\n    for (let modifiedResource of modifiedResources) {\n      rollbackResource(newState, modifiedResource.type, modifiedResource.id);\n    }\n  }\n  return newState;\n};\n\nexport const deleteStoreResources = (\n  storeData: NgrxJsonApiStoreData,\n  query: Query\n) => {\n  let newState = { ...storeData };\n  // if an id is not provided, all resources of the provided type will be deleted\n  if (typeof query.id === 'undefined') {\n    newState[query.type] = {};\n  } else {\n    newState[query.type] = _.omit(newState[query.type], [\n      query.id,\n    ]) as NgrxJsonApiStoreResources;\n  }\n  return newState;\n};\n\nexport const clearQueryResult = (\n  storeData: NgrxJsonApiStoreQueries,\n  queryId: string\n) => {\n  let newQuery = { ...storeData[queryId] };\n  delete newQuery.resultIds;\n  delete newQuery.errors;\n  delete newQuery.meta;\n  delete newQuery.links;\n\n  let newState = { ...storeData };\n  newState[queryId] = newQuery;\n  return newState;\n};\n\n/**\n * Updates a given storeData by either inserting a resource or updating\n * an existing resource.\n *\n * @param storeData\n * @param resource\n * @param fromServer\n * @param override\n *\n * @returns a new NgrxJsonApiStoreData with an inserted/updated resource.\n */\nexport const updateStoreDataFromResource = (\n  storeData: NgrxJsonApiStoreData,\n  resource: Resource,\n  fromServer: boolean,\n  override: boolean\n): NgrxJsonApiStoreData => {\n  if (_.isUndefined(storeData[resource.type])) {\n    let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n    newStoreData[resource.type] = {};\n    newStoreData[resource.type] = insertStoreResource(\n      newStoreData[resource.type],\n      resource,\n      fromServer\n    );\n    return newStoreData;\n  } else if (_.isUndefined(storeData[resource.type][resource.id]) || override) {\n    let updatedStoreResources = insertStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  } else {\n    let updatedStoreResources = updateStoreResource(\n      storeData[resource.type],\n      resource,\n      fromServer\n    );\n\n    // check if nothing has changed\n    if (updatedStoreResources !== storeData[resource.type]) {\n      let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n      newStoreData[resource.type] = updatedStoreResources;\n      return newStoreData;\n    }\n    return storeData;\n  }\n};\n\nexport const updateStoreDataFromPayload = (\n  storeData: NgrxJsonApiStoreData,\n  payload: Document\n): NgrxJsonApiStoreData => {\n  let data = <Array<Resource> | Resource>_.get(payload, 'data');\n\n  if (_.isUndefined(data)) {\n    return storeData;\n  }\n\n  let resources: Array<Resource> = _.isArray(data)\n    ? <Resource[]>data\n    : <Resource[]>[data];\n  let included = <Array<Resource>>_.get(payload, 'included');\n  if (!_.isUndefined(included)) {\n    resources = [...resources, ...included];\n  }\n\n  let newStoreData: NgrxJsonApiStoreData = { ...storeData };\n\n  let hasChange = false;\n  for (const resource of resources) {\n    const storeResource = {\n      ...resource,\n      persistedResource: resource,\n      state: 'IN_SYNC',\n      errors: [],\n      loading: false,\n    } as StoreResource;\n\n    if (!_.isEqual(storeResource, resource)) {\n      hasChange = true;\n      if (!newStoreData[resource.type]) {\n        newStoreData[resource.type] = {};\n      } else if (newStoreData[resource.type] === storeData[resource.type]) {\n        newStoreData[resource.type] = { ...storeData[resource.type] };\n      }\n      newStoreData[resource.type][resource.id] = storeResource;\n    }\n  }\n  return hasChange ? newStoreData : storeData;\n};\n\n/**\n * Updates the storeQueries by either adding a new ResourceQueryStore\n * or modifying an existing one.\n *\n * @param storeQueries\n * @param query\n *\n * @return a new NgrxJsonApiStoreQueries with the inserted/modified\n * ResourceQueryStore\n */\nexport const updateQueryParams = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  query: Query\n): NgrxJsonApiStoreQueries => {\n  if (!query.queryId) {\n    return storeQueries;\n  }\n\n  let newStoreQuery = { ...storeQueries[query.queryId] };\n  newStoreQuery.loading = true;\n  newStoreQuery.query = _.cloneDeep(query);\n\n  if (_.isUndefined(newStoreQuery.errors)) {\n    newStoreQuery.errors = [];\n  }\n\n  let newStoreQueries: NgrxJsonApiStoreQueries = { ...storeQueries };\n  newStoreQueries[newStoreQuery.query.queryId] = newStoreQuery;\n  return newStoreQueries;\n};\n\n/**\n * Updates the query results for given a queryId and the results.\n */\nexport const updateQueryResults = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  let storeQuery: StoreQuery = storeQueries[queryId];\n  if (storeQuery) {\n    let data = _.isArray(document.data) ? document.data : [document.data];\n    let newQueryStore = {\n      ...storeQuery,\n      resultIds: data.map(it => (it ? toResourceIdentifier(it) : [])),\n      meta: document.meta,\n      links: document.links,\n      loading: false,\n    };\n\n    if (!_.isEqual(newQueryStore, storeQuery)) {\n      let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n      newState[queryId] = <StoreQuery>newQueryStore;\n      return newState;\n    }\n  }\n  return storeQueries;\n};\n\n/**\n * Update the query errors given the queryId and a storeQueries and the\n * document containing the error\n *\n *\n */\nexport const updateQueryErrors = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string,\n  document: Document\n): NgrxJsonApiStoreQueries => {\n  if (!queryId || !storeQueries[queryId]) {\n    return storeQueries;\n  }\n  let newState = { ...storeQueries };\n  let newStoreQuery = { ...newState[queryId] };\n  newStoreQuery.errors = [];\n  newStoreQuery.loading = false;\n  if (document.errors) {\n    newStoreQuery.errors.push(...document.errors);\n  }\n  newState[queryId] = newStoreQuery;\n  return newState;\n};\n\n/**\n * Removes a query given its queryId from the NgrxJsonApiStoreQueries.\n */\nexport const removeQuery = (\n  storeQueries: NgrxJsonApiStoreQueries,\n  queryId: string\n): NgrxJsonApiStoreQueries => {\n  let newState: NgrxJsonApiStoreQueries = { ...storeQueries };\n  delete newState[queryId];\n  return newState;\n};\n\n/**\n * Given a resource, it will return an object containing the resource id and type.\n */\nexport const toResourceIdentifier = (\n  resource: Resource\n): ResourceIdentifier => {\n  return { type: resource.type, id: resource.id };\n};\n\n/**\n * Get the value for the last field in a given fitering path.\n *\n * @param path\n * @param baseStoreResource\n * @param storeData\n * @param resourceDefinitions\n * @param pathSepartor\n * @returns the value of the last field in the path.\n */\nexport const getResourceFieldValueFromPath = (\n  path: string,\n  baseStoreResource: StoreResource,\n  storeData: NgrxJsonApiStoreData,\n  resourceDefinitions: Array<ResourceDefinition>,\n  pathSeparator?: string\n) => {\n  if (_.isUndefined(pathSeparator)) {\n    pathSeparator = '.';\n  }\n  let fields: Array<string> = path.split(pathSeparator);\n  let currentStoreResource = baseStoreResource;\n  for (let i = 0; i < fields.length; i++) {\n    let definition = _.find(resourceDefinitions, {\n      type: currentStoreResource.type,\n    });\n\n    if (_.isUndefined(definition)) {\n      throw new Error('Definition not found');\n    }\n    // if both attributes and relationships are missing, raise an error\n    if (\n      _.isUndefined(definition.attributes) &&\n      _.isUndefined(definition.relationships)\n    ) {\n      throw new Error('Attributes or Relationships must be provided');\n    }\n\n    if (fields[i] === 'id') {\n      return _.get(currentStoreResource, 'id', null);\n    } else if (definition.attributes.hasOwnProperty(fields[i])) {\n      return _.get(currentStoreResource, 'attributes.' + fields[i], null);\n    } else if (definition.relationships.hasOwnProperty(fields[i])) {\n      if (i === fields.length - 1) {\n        throw new Error(\n          'The last field in the filtering path cannot be a relation'\n        );\n      }\n      let resourceRelation = definition.relationships[fields[i]];\n      if (resourceRelation.relationType === 'hasMany') {\n        throw new Error('Cannot filter past a hasMany relation');\n      } else {\n        let relation = _.get(\n          currentStoreResource,\n          'relationships.' + fields[i],\n          null\n        );\n        if (!relation || !relation.data) {\n          return null;\n        } else {\n          let relatedPath = [resourceRelation.type, relation.data.id];\n          currentStoreResource = _.get<any, any>(storeData, relatedPath);\n        }\n      }\n    } else {\n      throw new Error('Cannot find field in attributes or relationships');\n    }\n    if (_.isUndefined(currentStoreResource)) {\n      return null;\n    }\n  }\n};\n\nexport const filterResources = (\n  resources: NgrxJsonApiStoreResources,\n  storeData: NgrxJsonApiStoreData,\n  query: Query,\n  resourceDefinitions: Array<ResourceDefinition>,\n  filteringConfig?: NgrxJsonApiFilteringConfig\n) => {\n  return _.filter(resources, resource => {\n    if (\n      query.hasOwnProperty('params') &&\n      query.params.hasOwnProperty('filtering')\n    ) {\n      return query.params.filtering.every(element => {\n        let pathSeparator;\n        let filteringOperators;\n\n        if (!_.isUndefined(filteringConfig)) {\n          pathSeparator = <string>_.get(filteringConfig, 'pathSeparator');\n          filteringOperators = <Array<FilteringOperator>>_.get(\n            filteringConfig,\n            'filteringOperators'\n          );\n        }\n        // resource type and attribute\n        let resourceFieldValue = getResourceFieldValueFromPath(\n          element.path,\n          resource,\n          storeData,\n          resourceDefinitions,\n          pathSeparator\n        );\n        if (!resourceFieldValue) {\n          return false;\n        }\n\n        let operator = <FilteringOperator>_.find(filteringOperators, {\n          name: element.operator,\n        });\n\n        if (operator) {\n          return operator.comparison(element.value, resourceFieldValue);\n        }\n\n        element.operator = element.hasOwnProperty('operator')\n          ? element.operator\n          : 'iexact';\n\n        switch (element.operator) {\n          case 'iexact':\n            if (_.isString(element.value) && _.isString(resourceFieldValue)) {\n              return (\n                element.value.toLowerCase() === resourceFieldValue.toLowerCase()\n              );\n            } else {\n              return element.value === resourceFieldValue;\n            }\n\n          case 'exact':\n            return element.value === resourceFieldValue;\n\n          case 'contains':\n            return _.includes(resourceFieldValue, element.value);\n\n          case 'icontains':\n            return _.includes(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'in':\n            if (_.isArray(element.value)) {\n              return _.includes(element.value, resourceFieldValue);\n            } else {\n              return _.includes([element.value], resourceFieldValue);\n            }\n          case 'gt':\n            return element.value > resourceFieldValue;\n\n          case 'gte':\n            return element.value >= resourceFieldValue;\n\n          case 'lt':\n            return element.value < resourceFieldValue;\n\n          case 'lte':\n            return element.value <= resourceFieldValue;\n\n          case 'startswith':\n            return _.startsWith(resourceFieldValue, element.value);\n\n          case 'istartswith':\n            return _.startsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          case 'endswith':\n            return _.endsWith(resourceFieldValue, element.value);\n\n          case 'iendswith':\n            return _.endsWith(\n              resourceFieldValue.toLowerCase(),\n              element.value.toLowerCase()\n            );\n\n          default:\n            return true;\n        }\n      });\n    } else {\n      return true;\n    }\n  });\n};\n\nexport const generateIncludedQueryParams = (\n  included: Array<string>\n): string => {\n  if (_.isEmpty(included)) {\n    return '';\n  }\n\n  return 'include=' + included.join();\n};\n\nexport const generateFieldsQueryParams = (fields: Array<string>): string => {\n  if (_.isEmpty(fields)) {\n    return '';\n  }\n\n  return 'fields=' + fields.join();\n};\n\nexport const generateFilteringQueryParams = (\n  filtering: Array<FilteringParam>\n): string => {\n  if (_.isEmpty(filtering)) {\n    return '';\n  }\n  let filteringParams = filtering.map(f => {\n    return (\n      'filter' +\n      (f.path ? '[' + f.path + ']' : '') +\n      (f.operator ? '[' + f.operator + ']' : '') +\n      '=' +\n      encodeURIComponent(f.value)\n    );\n  });\n  return filteringParams.join('&');\n};\n\nexport const generateSortingQueryParams = (\n  sorting: Array<SortingParam>\n): string => {\n  if (_.isEmpty(sorting)) {\n    return '';\n  }\n  return (\n    'sort=' +\n    sorting\n      .map(f => (f.direction === Direction.ASC ? '' : '-') + f.api)\n      .join(',')\n  );\n};\n\nexport const generateQueryParams = (...params: Array<string>) => {\n  let newParams = params.filter(p => p !== '');\n  if (newParams.length !== 0) {\n    return '?' + newParams.join('&');\n  } else {\n    return '';\n  }\n};\n\nexport const generatePayload = (\n  resource: StoreResource,\n  operation: OperationType\n): Payload => {\n  let payload: Payload = {\n    query: {\n      type: resource.type,\n    },\n  };\n\n  // the data to be updated or created\n  if (operation === 'POST' || operation === 'PATCH') {\n    payload.jsonApiData = {\n      data: {\n        id: resource.id,\n        type: resource.type,\n        attributes: resource.attributes,\n        relationships: resource.relationships,\n      },\n      ...(resource.meta\n        ? {\n            meta: resource.meta,\n          }\n        : null),\n    };\n  }\n\n  if (operation === 'POST' && resource.hasTemporaryId) {\n    delete payload.jsonApiData.data.id;\n  }\n\n  if (resource.isMetaOnly) {\n    delete payload.jsonApiData.data;\n  }\n\n  // 'DELETE' only needs a query and it also needs an id in its query\n  // 'PATCH' also needs an id in its query\n  // 'POST' needed locally to allow to write back errors to store if id is available\n  if (operation === 'PATCH' || operation === 'DELETE' || operation === 'POST') {\n    payload.query.id = resource.id;\n  }\n\n  return payload;\n};\n\n/* tslint:disable */\nexport const uuid = () => {\n  let lut = [];\n  for (let i = 0; i < 256; i++) {\n    lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n  }\n  let d0 = (Math.random() * 0xffffffff) | 0;\n  let d1 = (Math.random() * 0xffffffff) | 0;\n  let d2 = (Math.random() * 0xffffffff) | 0;\n  let d3 = (Math.random() * 0xffffffff) | 0;\n  return (\n    lut[d0 & 0xff] +\n    lut[(d0 >> 8) & 0xff] +\n    lut[(d0 >> 16) & 0xff] +\n    lut[(d0 >> 24) & 0xff] +\n    '-' +\n    lut[d1 & 0xff] +\n    lut[(d1 >> 8) & 0xff] +\n    '-' +\n    lut[((d1 >> 16) & 0x0f) | 0x40] +\n    lut[(d1 >> 24) & 0xff] +\n    '-' +\n    lut[(d2 & 0x3f) | 0x80] +\n    lut[(d2 >> 8) & 0xff] +\n    '-' +\n    lut[(d2 >> 16) & 0xff] +\n    lut[(d2 >> 24) & 0xff] +\n    lut[d3 & 0xff] +\n    lut[(d3 >> 8) & 0xff] +\n    lut[(d3 >> 16) & 0xff] +\n    lut[(d3 >> 24) & 0xff]\n  );\n};\n/* tslint:enable */\n\nconst toKey = (id: ResourceIdentifier) => {\n  return id.id + '@' + id.type;\n};\n\nconst collectQueryResults = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let queryName in state.queries) {\n    if (state.queries.hasOwnProperty(queryName)) {\n      let query = state.queries[queryName];\n      if (query.resultIds) {\n        for (let resultId of query.resultIds) {\n          usedResources[toKey(resultId)] = true;\n        }\n      }\n    }\n  }\n};\n\nconst collectPendingChanges = (state: NgrxJsonApiStore, usedResources: any) => {\n  for (let type in state.data) {\n    if (state.data.hasOwnProperty(type)) {\n      let resources = state.data[type];\n      for (let id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let resource = resources[id];\n          if (resource.state !== 'IN_SYNC') {\n            usedResources[toKey(resource)] = true;\n          }\n        }\n      }\n    }\n  }\n};\n\nconst collectReferencesForResource = (\n  state: NgrxJsonApiStore,\n  usedResources: any,\n  resource: Resource\n) => {\n  let hasChanges: boolean;\n  for (let relationshipName in resource.relationships) {\n    if (resource.relationships.hasOwnProperty(relationshipName)) {\n      let data = resource.relationships[relationshipName].data;\n      if (data) {\n        let dependencyIds: Array<ResourceIdentifier> =\n          data instanceof Array ? data : [data];\n        for (let dependencyId of dependencyIds) {\n          let dependencyKey = toKey(dependencyId);\n          if (!usedResources[dependencyKey]) {\n            // change found, an other iteration will be necssary to detect\n            // transitive dependencies\n            hasChanges = true;\n            usedResources[dependencyKey] = true;\n          }\n        }\n      }\n    }\n  }\n  return hasChanges;\n};\n\nconst collectReferences = (state: NgrxJsonApiStore, usedResources: any) => {\n  while (true) {\n    let hasChanges = false;\n    for (let type in state.data) {\n      if (state.data.hasOwnProperty(type)) {\n        let resources = state.data[type];\n        for (let id in resources) {\n          if (resources.hasOwnProperty(id)) {\n            let resource = resources[id];\n            if (usedResources[toKey(resource)]) {\n              // in use, do not collect its relations\n              hasChanges =\n                hasChanges ||\n                collectReferencesForResource(state, usedResources, resource);\n            }\n          }\n        }\n      }\n    }\n    if (!hasChanges) {\n      break;\n    }\n  }\n};\n\nconst sweepUnusedResources = (state: NgrxJsonApiStore, usedResources: any) => {\n  let hasDeletions = false;\n  let newState = _.cloneDeep(state);\n  for (let type in newState.data) {\n    if (newState.data.hasOwnProperty(type)) {\n      let resources = newState.data[type];\n      for (let id in resources) {\n        if (resources.hasOwnProperty(id)) {\n          let resource = resources[id];\n          if (!usedResources[toKey(resource)]) {\n            hasDeletions = true;\n            delete resources[id];\n          }\n        }\n      }\n\n      if (_.isEmpty(resources)) {\n        delete newState.data[type];\n      }\n    }\n  }\n  return hasDeletions ? newState : state;\n};\n\nexport const compactStore = (state: NgrxJsonApiStore) => {\n  let usedResources = {};\n\n  // query results can not be collected\n  collectQueryResults(state, usedResources);\n\n  // pending changes cannot be collected\n  collectPendingChanges(state, usedResources);\n\n  // references from non-collected objects cannot be collected as well\n  collectReferences(state, usedResources);\n\n  // remove everything that is not collected\n  return sweepUnusedResources(state, usedResources);\n};\n\ninterface TopologySortContext {\n  pendingResources: Array<StoreResource>;\n  cursor: number;\n  sorted: Array<StoreResource>;\n  visited: Array<boolean>;\n  dependencies: { [id: string]: Array<StoreResource> };\n}\n\nexport const sortPendingChanges = (\n  pendingResources: Array<StoreResource>\n): Array<StoreResource> => {\n  // allocate dependency\n  let dependencies: any = {};\n  let pendingMap: any = {};\n  for (let pendingResource of pendingResources) {\n    let resource = pendingResource;\n    let key = toKey(resource);\n    dependencies[key] = [];\n    pendingMap[key] = pendingResource;\n  }\n\n  // extract dependencies\n  for (let pendingResource of pendingResources) {\n    let resource = pendingResource;\n    if (resource.relationships) {\n      let key = toKey(resource);\n      Object.keys(resource.relationships).forEach(relationshipName => {\n        let data = resource.relationships[relationshipName].data;\n        if (data) {\n          let dependencyIds: Array<ResourceIdentifier> =\n            data instanceof Array ? data : [data];\n          for (let dependencyId of dependencyIds) {\n            let dependencyKey = toKey(dependencyId);\n            if (\n              pendingMap[dependencyKey] &&\n              pendingMap[dependencyKey].state === 'CREATED'\n            ) {\n              // we have a dependency between two unsaved objects\n              dependencies[key].push(pendingMap[dependencyKey]);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  // order\n  let context = {\n    pendingResources: pendingResources,\n    cursor: pendingResources.length,\n    sorted: new Array(pendingResources.length),\n    dependencies: dependencies,\n    visited: <any[]>[],\n  };\n\n  let i = context.cursor;\n  while (i--) {\n    if (!context.visited[i]) {\n      visitPending(pendingResources[i], i, [], context);\n    }\n  }\n\n  return context.sorted.reverse();\n};\n\nconst visitPending = (\n  pendingResource: StoreResource,\n  i: any,\n  predecessors: any,\n  context: TopologySortContext\n) => {\n  let key = toKey(pendingResource);\n  if (predecessors.indexOf(key) >= 0) {\n    throw new Error(\n      'Cyclic dependency: ' + key + ' with ' + JSON.stringify(predecessors)\n    );\n  }\n\n  if (context.visited[i]) {\n    return;\n  }\n  context.visited[i] = true;\n\n  // outgoing edges\n  let outgoing: Array<StoreResource> = context.dependencies[key];\n\n  let preds = predecessors.concat(key);\n  for (let child of outgoing) {\n    visitPending(\n      child,\n      context.pendingResources.indexOf(child),\n      preds,\n      context\n    );\n  }\n\n  context.sorted[--context.cursor] = pendingResource;\n};\n\nfunction collectPendingChange(\n  state: NgrxJsonApiStoreData,\n  pending: Array<StoreResource>,\n  id: ResourceIdentifier,\n  include: Array<Array<string>>,\n  includeNew: boolean\n) {\n  let storeResource = state[id.type][id.id];\n  if (\n    storeResource.state !== 'IN_SYNC' &&\n    (storeResource.state !== 'NEW' || includeNew)\n  ) {\n    pending.push(storeResource);\n  }\n\n  for (let includeElement of include) {\n    if (includeElement.length > 0) {\n      let relationshipName = includeElement[0];\n      if (\n        storeResource.relationships &&\n        storeResource.relationships[relationshipName]\n      ) {\n        let data = storeResource.relationships[relationshipName].data;\n        if (data) {\n          let relationInclude: Array<Array<string>> = [];\n          include\n            .filter(\n              relIncludeElem =>\n                relIncludeElem.length >= 2 &&\n                relIncludeElem[0] == relationshipName\n            )\n            .forEach(relIncludeElem =>\n              relationInclude.push(relIncludeElem.slice(1))\n            );\n\n          if (_.isArray(data)) {\n            let relationIds = data as Array<ResourceIdentifier>;\n            relationIds.forEach(relationId =>\n              collectPendingChange(\n                state,\n                pending,\n                relationId,\n                relationInclude,\n                includeNew\n              )\n            );\n          } else {\n            let relationId = data as ResourceIdentifier;\n            collectPendingChange(\n              state,\n              pending,\n              relationId,\n              relationInclude,\n              includeNew\n            );\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function getPendingChanges(\n  state: NgrxJsonApiStoreData,\n  ids: Array<ResourceIdentifier>,\n  include: Array<string>,\n  includeNew?: boolean\n): Array<StoreResource> {\n  let pending: Array<StoreResource> = [];\n\n  if (_.isUndefined(ids)) {\n    // check all\n    Object.keys(state).forEach(type => {\n      Object.keys(state[type]).forEach(id => {\n        let storeResource = state[type][id];\n        if (\n          storeResource.state !== 'IN_SYNC' &&\n          (storeResource.state !== 'NEW' || includeNew)\n        ) {\n          pending.push(storeResource);\n        }\n      });\n    });\n  } else {\n    let relationshipInclusions = [];\n    if (include) {\n      for (let includeElement of include) {\n        relationshipInclusions.push(includeElement.split('.'));\n      }\n    }\n    for (let id of ids) {\n      collectPendingChange(\n        state,\n        pending,\n        id,\n        relationshipInclusions,\n        includeNew\n      );\n    }\n    pending = _.uniqBy(pending, function(e) {\n      return e.type + '####' + e.id;\n    });\n  }\n\n  return pending;\n}\n","import * as _ from 'lodash';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/concat';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/combineLatest';\nimport 'rxjs/add/operator/concat';\nimport 'rxjs/add/operator/concatMap';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/let';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/observable/zip';\n\nimport { filter, map } from 'rxjs/operators';\n\nimport { Store, select } from '@ngrx/store';\n\nimport {\n  ManyQueryResult,\n  NGRX_JSON_API_DEFAULT_ZONE,\n  NgrxJsonApiState,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreResources,\n  NgrxJsonApiZone,\n  OneQueryResult,\n  Resource,\n  ResourceIdentifier,\n  NgrxJsonApiStoreQueries,\n  StoreResource,\n  NgrxJsonApiStoreData,\n  StoreQuery,\n} from './interfaces';\nimport { denormaliseStoreResource, denormaliseStoreResources } from './utils';\n\nexport function selectNgrxJson() {\n  return (state$: Observable<any>) =>\n    (<Store<any>>state$).pipe(\n      select('NgrxJsonApi'),\n      map((it: any) => it as NgrxJsonApiState),\n      filter((it: any) => !_.isUndefined(it))\n    );\n}\n\nexport function selectNgrxJsonApiDefaultZone() {\n  return selectNgrxJsonApiZone(NGRX_JSON_API_DEFAULT_ZONE);\n}\n\nexport function selectNgrxJsonApiZone(zoneId: string) {\n  return (state$: Observable<any>) =>\n    (<Store<any>>state$)\n      .let(selectNgrxJson())\n      .map((it: any) => it.zones[zoneId] as NgrxJsonApiZone);\n}\n\nexport function getNgrxJsonApiZone(state: any, zoneId: string) {\n  return state['NgrxJsonApi']['zones'][zoneId] as NgrxJsonApiZone;\n}\n\nexport function selectStoreQuery(\n  queryId: string\n): (state: Observable<NgrxJsonApiStore>) => Observable<StoreQuery> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => state.queries[queryId]);\n  };\n}\n\nexport function selectStoreResourcesOfType(\n  type: string\n): (\n  state: Observable<NgrxJsonApiStore>\n) => Observable<NgrxJsonApiStoreResources> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .map(state => state.data)\n      .map(data => (data ? data[type] : undefined));\n  };\n}\n\nexport function selectStoreResource(identifier: ResourceIdentifier) {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$\n      .let(selectStoreResourcesOfType(identifier.type))\n      .map(\n        resources =>\n          (resources ? resources[identifier.id] : undefined) as StoreResource\n      );\n  };\n}\n\nexport function selectStoreResources(identifiers: ResourceIdentifier[]) {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.pipe(\n      map(state => state.data),\n      map(data => {\n        return identifiers.map(identifier => {\n          if (!data || !data[identifier.type]) {\n            return undefined;\n          }\n          return data[identifier.type][identifier.id] as StoreResource;\n        });\n      })\n    );\n  };\n}\n\nexport function selectManyQueryResult(\n  queryId: string,\n  denormalize?: boolean\n): (state: Observable<NgrxJsonApiStore>) => Observable<ManyQueryResult> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => {\n      let storeQuery = state.queries[queryId];\n      if (!storeQuery) {\n        return undefined;\n      }\n\n      if (_.isEmpty(storeQuery.resultIds)) {\n        let queryResult: ManyQueryResult = {\n          ...storeQuery,\n          data: _.isUndefined(storeQuery.resultIds) ? undefined : [],\n        };\n        return queryResult;\n      } else {\n        let results = storeQuery.resultIds.map(\n          id => (state.data[id.type] ? state.data[id.type][id.id] : undefined)\n        );\n        if (denormalize) {\n          results = denormaliseStoreResources(results, state.data);\n        }\n        return {\n          ...storeQuery,\n          data: results as Array<StoreResource>,\n        };\n      }\n    });\n  };\n}\n\nexport function selectOneQueryResult(\n  queryId: string,\n  denormalize?: boolean\n): (state: Observable<NgrxJsonApiStore>) => Observable<OneQueryResult> {\n  return (state$: Observable<NgrxJsonApiStore>) => {\n    return state$.map(state => {\n      let storeQuery = state.queries[queryId];\n      if (!storeQuery) {\n        return undefined;\n      }\n\n      if (_.isEmpty(storeQuery.resultIds)) {\n        let queryResult: OneQueryResult = {\n          ...storeQuery,\n          data: _.isUndefined(storeQuery.resultIds) ? undefined : null,\n        };\n        return queryResult;\n      } else {\n        if (storeQuery.resultIds.length >= 2) {\n          throw new Error(\n            'expected single result for query ' + storeQuery.query.queryId\n          );\n        }\n\n        let resultId = storeQuery.resultIds[0];\n        let result = state.data[resultId.type]\n          ? state.data[resultId.type][resultId.id]\n          : undefined;\n        if (denormalize) {\n          result = denormaliseStoreResource(result, state.data);\n        }\n        const queryResult: OneQueryResult = {\n          ...storeQuery,\n          data: result,\n        };\n        return queryResult;\n      }\n    });\n  };\n}\n\n/**\n * deprecated, to not use any longer\n */\nexport function getNgrxJsonApiStore(state$: Observable<any>): Observable<any> {\n  return state$.let(selectNgrxJsonApiDefaultZone());\n}\n\n/**\n * deprecated, to not use any longer\n */\nexport class NgrxJsonApiSelectors {\n  constructor() {}\n\n  public getNgrxJsonApiStore$(): (state$: Observable<any>) => Observable<any> {\n    return (state$: Observable<any>): Observable<NgrxJsonApiStore> => {\n      return state$.let(selectNgrxJsonApiDefaultZone());\n    };\n  }\n\n  public getStoreData$(): (\n    state$: Store<NgrxJsonApiStore>\n  ) => Observable<NgrxJsonApiStoreData> {\n    return (\n      state$: Store<NgrxJsonApiStore>\n    ): Observable<NgrxJsonApiStoreData> => {\n      return state$.select('data');\n    };\n  }\n\n  public getStoreResourceOfType$(type: string) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreData$())\n        .map(resources => (resources ? resources[type] : undefined));\n    };\n  }\n\n  public getStoreQueries$() {\n    return (state$: Store<NgrxJsonApiStore>) => {\n      return state$.select('queries');\n    };\n  }\n\n  public getResourceQuery$(queryId: string) {\n    return selectStoreQuery(queryId);\n  }\n\n  public getStoreResource$(identifier: ResourceIdentifier) {\n    return selectStoreResource(identifier);\n  }\n\n  public getManyResults$(queryId: string, denormalize: boolean) {\n    return selectManyQueryResult(queryId, denormalize);\n  }\n\n  public getOneResult$(queryId: string, denormalize: boolean) {\n    return selectOneQueryResult(queryId, denormalize);\n  }\n\n  public getPersistedResource$(identifier: ResourceIdentifier) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      return state$\n        .let(this.getStoreResource$(identifier))\n        .map(it => (it ? it.persistedResource : undefined));\n    };\n  }\n}\n","import { Action } from '@ngrx/store';\n\nimport {\n  ApiApplyInitAction,\n  ApiRollbackAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport {\n  ModifyStoreResourceErrorsPayload,\n  NgrxJsonApiState,\n  NgrxJsonApiZone,\n  Query,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  clearQueryResult,\n  compactStore,\n  deleteStoreResources,\n  getPendingChanges,\n  removeQuery,\n  removeStoreResource,\n  rollbackStoreResources,\n  setIn,\n  updateQueriesForDeletedResource,\n  updateQueryErrors,\n  updateQueryParams,\n  updateQueryResults,\n  updateResourceErrors,\n  updateResourceErrorsForQuery,\n  updateResourceState,\n  updateStoreDataFromPayload,\n  updateStoreDataFromResource,\n} from './utils';\n\nexport const initialNgrxJsonApiZone: NgrxJsonApiZone = {\n  isCreating: 0,\n  isReading: 0,\n  isUpdating: 0,\n  isDeleting: 0,\n  isApplying: 0,\n  data: {},\n  queries: {},\n};\n\nexport const initialNgrxJsonApiState: NgrxJsonApiState = {\n  zones: {},\n};\n\nexport function NgrxJsonApiStoreReducer(\n  state: NgrxJsonApiState = initialNgrxJsonApiState,\n  action: any\n): NgrxJsonApiState {\n  const zoneId = action['zoneId'];\n  if (!zoneId) {\n    return state;\n  }\n  let zone = state.zones[zoneId];\n  if (!zone) {\n    zone = initialNgrxJsonApiZone;\n  }\n  let newZone = NgrxJsonApiZoneReducer(zone, action);\n  if (zone != newZone) {\n    return {\n      ...state,\n      zones: {\n        ...state.zones,\n        [zoneId]: newZone,\n      },\n    };\n  } else {\n    return state;\n  }\n}\n\nexport function NgrxJsonApiZoneReducer(\n  zone: NgrxJsonApiZone,\n  action: any\n): NgrxJsonApiZone {\n  let newZone;\n  switch (action.type) {\n    case NgrxJsonApiActionTypes.API_POST_INIT: {\n      let updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      newZone = {\n        ...zone,\n        data: updatedData,\n        isCreating: zone.isCreating + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_INIT: {\n      let query = action.payload as Query;\n      newZone = {\n        ...zone,\n        queries: updateQueryParams(zone.queries, query),\n        isReading: zone.isReading + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_INIT: {\n      let updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        false\n      );\n      newZone = {\n        ...zone,\n        data: updatedData,\n        isUpdating: zone.isUpdating + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_INIT: {\n      newZone = {\n        ...zone,\n        data: updateResourceState(zone.data, action.payload, 'DELETED'),\n        isDeleting: zone.isDeleting + 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_POST_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(zone.data, action.payload.jsonApiData),\n        isCreating: zone.isCreating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(zone.data, action.payload.jsonApiData),\n        queries: updateQueryResults(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: zone.isReading - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: updateStoreDataFromPayload(zone.data, action.payload.jsonApiData),\n        isUpdating: zone.isUpdating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_SUCCESS: {\n      newZone = {\n        ...zone,\n        data: deleteStoreResources(zone.data, action.payload.query),\n        queries: updateQueriesForDeletedResource(zone.queries, {\n          id: action.payload.query.id,\n          type: action.payload.query.type,\n        }),\n        isDeleting: zone.isDeleting - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_QUERY_REFRESH: {\n      // clear result ids and wait until new data is fetched (triggered by effect)\n      newZone = {\n        ...zone,\n        queries: clearQueryResult(zone.queries, action.payload),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_POST_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isCreating: zone.isCreating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_GET_FAIL: {\n      newZone = {\n        ...zone,\n        queries: updateQueryErrors(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        ),\n        isReading: zone.isReading - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_PATCH_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isUpdating: zone.isUpdating - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_DELETE_FAIL: {\n      newZone = {\n        ...zone,\n        data: updateResourceErrorsForQuery(\n          zone.data,\n          action.payload.query,\n          action.payload.jsonApiData\n        ),\n        isDeleting: zone.isDeleting - 1,\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.REMOVE_QUERY: {\n      let queryId = action.payload as string;\n      newZone = { ...zone, queries: removeQuery(zone.queries, queryId) };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_INIT: {\n      let query = action.payload as Query;\n      newZone = { ...zone, queries: updateQueryParams(zone.queries, query) };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS: {\n      let payload = action.payload as ModifyStoreResourceErrorsPayload;\n      newZone = {\n        ...zone,\n        data: updateResourceErrors(\n          zone.data,\n          payload.resourceId,\n          payload.errors,\n          payload.modificationType\n        ),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS: {\n      return setIn(\n        zone,\n        'queries',\n        updateQueryResults(\n          zone.queries,\n          action.payload.query.queryId,\n          action.payload.jsonApiData\n        )\n      );\n    }\n    case NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE: {\n      let updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        false\n      );\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.POST_STORE_RESOURCE: {\n      let updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.NEW_STORE_RESOURCE: {\n      let updatedData = updateStoreDataFromResource(\n        zone.data,\n        action.payload,\n        false,\n        true\n      );\n      updatedData = updateResourceState(updatedData, action.payload, 'NEW');\n      if (updatedData !== zone.data) {\n        newZone = { ...zone, data: updatedData };\n        return newZone;\n      } else {\n        return zone;\n      }\n    }\n    case NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE: {\n      let resourceId = action.payload as ResourceIdentifier;\n      if (\n        zone.data[resourceId.type] &&\n        zone.data[resourceId.type][resourceId.id]\n      ) {\n        let resource = zone.data[resourceId.type][resourceId.id];\n\n        if (resource.state === 'NEW' || resource.state === 'CREATED') {\n          // not yet stored on server-side, just delete\n          newZone = {\n            ...zone,\n            data: removeStoreResource(zone.data, resourceId),\n          };\n          return newZone;\n        } else {\n          // stored on server, mark for deletion\n          newZone = {\n            ...zone,\n            data: updateResourceState(zone.data, action.payload, 'DELETED'),\n          };\n          return newZone;\n        }\n      }\n      return zone;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_INIT: {\n      let payload = (action as ApiApplyInitAction).payload;\n      let pending: Array<StoreResource> = getPendingChanges(\n        zone.data,\n        payload.ids,\n        payload.include\n      );\n      newZone = { ...zone, isApplying: zone.isApplying + 1 };\n      for (let pendingChange of pending) {\n        if (pendingChange.state === 'CREATED') {\n          newZone.isCreating++;\n        } else if (pendingChange.state === 'UPDATED') {\n          newZone.isUpdating++;\n        } else if (pendingChange.state === 'DELETED') {\n          newZone.isDeleting++;\n        } else {\n          throw new Error('unknown state ' + pendingChange.state);\n        }\n      }\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_APPLY_SUCCESS:\n    case NgrxJsonApiActionTypes.API_APPLY_FAIL: {\n      // apply all the committed or failed changes\n      let actions = action.payload as Array<Action>;\n      newZone = zone;\n      for (let commitAction of actions) {\n        newZone = NgrxJsonApiZoneReducer(newZone, commitAction);\n      }\n      newZone = { ...newZone, isApplying: zone['isApplying'] - 1 };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.API_ROLLBACK: {\n      let payload = (action as ApiRollbackAction).payload;\n      newZone = {\n        ...zone,\n        data: rollbackStoreResources(zone.data, payload.ids, payload.include),\n      };\n      return newZone;\n    }\n    case NgrxJsonApiActionTypes.CLEAR_STORE: {\n      return initialNgrxJsonApiZone;\n    }\n    case NgrxJsonApiActionTypes.COMPACT_STORE: {\n      return compactStore(zone);\n    }\n    default:\n      return zone;\n  }\n}\n\nexport const reducer = NgrxJsonApiStoreReducer;\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { Store, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { NgrxJsonApi } from './api';\nimport { NgrxJsonApiEffects } from './effects';\nimport { NgrxJsonApiService } from './services';\nimport { reducer } from './reducers';\nimport {\n  DenormaliseStoreResourcePipe,\n  GetDenormalisedValuePipe,\n  SelectStoreResourcePipe,\n  SelectStoreResourcesPipe,\n} from './pipes';\n\nimport { NgrxJsonApiConfig } from './interfaces';\nimport { NgrxJsonApiSelectors } from './selectors';\n\nexport const NGRX_JSON_API_CONFIG = new InjectionToken<NgrxJsonApiConfig>(\n  'NGRX_JSON_API_CONFIG'\n);\n\nexport function apiFactory(http: HttpClient, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApi(http, config);\n}\n\n/**\n * Deprecated, do not use any longer\n */\nexport function selectorsFactory() {\n  return new NgrxJsonApiSelectors();\n}\n\nexport function serviceFactory(store: Store<any>, config: NgrxJsonApiConfig) {\n  return new NgrxJsonApiService(store, config);\n}\n\nexport function configure(config: NgrxJsonApiConfig): Array<any> {\n  return [\n    {\n      provide: NgrxJsonApi,\n      useFactory: apiFactory,\n      deps: [HttpClient, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NgrxJsonApiSelectors,\n      useFactory: selectorsFactory,\n    },\n    {\n      provide: NgrxJsonApiService,\n      useFactory: serviceFactory,\n      deps: [Store, NGRX_JSON_API_CONFIG],\n    },\n    {\n      provide: NGRX_JSON_API_CONFIG,\n      useValue: config,\n    },\n  ];\n}\n\n@NgModule({\n  declarations: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n    SelectStoreResourcesPipe,\n  ],\n  imports: [\n    EffectsModule.forFeature([NgrxJsonApiEffects]),\n    StoreModule.forFeature('NgrxJsonApi', reducer, {}),\n  ],\n  exports: [\n    DenormaliseStoreResourcePipe,\n    GetDenormalisedValuePipe,\n    SelectStoreResourcePipe,\n    SelectStoreResourcesPipe,\n  ],\n})\nexport class NgrxJsonApiModule {\n  static configure(config: NgrxJsonApiConfig): ModuleWithProviders {\n    return {\n      ngModule: NgrxJsonApiModule,\n      providers: configure(config),\n    };\n  }\n}\n","export const NGRX_JSON_API_DEFAULT_ZONE = 'default';\n\nexport enum Direction {\n  ASC,\n  DESC,\n}\n\nexport interface Document {\n  data?: any;\n  included?: any;\n  meta?: any;\n  links?: any;\n  errors?: Array<ResourceError>;\n}\n\nexport interface FilteringParam {\n  path?: string;\n  operator?: string;\n  value?: any;\n}\n\nexport interface FilteringOperator {\n  name: string;\n  apiName?: string;\n  comparison: (value: any, resourceFieldValue: any) => boolean;\n}\n\nexport interface ManyResourceRelationship {\n  data?: Array<ResourceIdentifier>;\n  reference?: Array<StoreResource>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedManyResourceRelationship<T extends StoreResource>\n  extends ManyResourceRelationship {\n  reference?: Array<T>;\n}\n\n/**\n * Used by code generators to navigate relationships in a type-safe manner.\n * See crnk.io for a first such generator.\n */\nexport interface TypedOneResourceRelationship<T extends StoreResource>\n  extends OneResourceRelationship {\n  reference?: T;\n}\n\nexport interface NgrxJsonApiConfig {\n  apiUrl: string;\n  initialState?: any;\n  resourceDefinitions?: Array<ResourceDefinition>;\n  urlBuilder?: NgrxJsonApiUrlBuilder;\n  filteringConfig?: NgrxJsonApiFilteringConfig;\n\n  /**\n   * Custom request headers.\n   */\n  requestHeaders?: { [name: string]: any };\n\n  /**\n   * Allows to disable the apply action and replace it with a custom one. For example\n   * have a look at www.crnk.io that makes use of JSON PATCH to perform bulk updates.\n   */\n  applyEnabled?: boolean;\n  /**\n   * Allows to send/receive cookies, authorization headers with cross-site request.\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials\n   *\n   * default is false\n   */\n  requestWithCredentials?: boolean;\n}\n\nexport interface NgrxJsonApiState {\n  zones: NgrxJsonApiZones;\n}\n\nexport interface NgrxJsonApiZones {\n  [id: string]: NgrxJsonApiZone;\n}\n\n/**\n * deprecated, mae use of NgrxJsonApiZone instead\n */\nexport interface NgrxJsonApiStore {\n  data: NgrxJsonApiStoreData;\n  queries: NgrxJsonApiStoreQueries;\n  isCreating: number;\n  isReading: number;\n  isUpdating: number;\n  isDeleting: number;\n  isApplying: number;\n}\n\nexport interface NgrxJsonApiZone extends NgrxJsonApiStore {}\n\nexport interface NgrxJsonApiStoreData {\n  [id: string]: NgrxJsonApiStoreResources;\n}\n\nexport interface NgrxJsonApiStoreQueries {\n  [id: string]: StoreQuery;\n}\n\nexport interface NgrxJsonApiStoreResources {\n  [id: string]: StoreResource;\n}\n\nexport interface NgrxJsonApiFilteringConfig {\n  pathSeparator?: string;\n  filteringOperators?: Array<FilteringOperator>;\n}\n\nexport interface NgrxJsonApiUrlBuilder {\n  generateFilteringQueryParams?: (params: Array<FilteringParam>) => string;\n  generateFieldsQueryParams?: (params: Array<string>) => string;\n  generateIncludedQueryParams?: (params: Array<string>) => string;\n  generateSortingQueryParams?: (params: Array<SortingParam>) => string;\n  generateQueryParams?: (...params: Array<string>) => string;\n}\n\nexport type OperationType = 'GET' | 'DELETE' | 'PATCH' | 'POST' | false;\n\nexport interface OneResourceRelationship {\n  data?: ResourceIdentifier;\n  reference?: StoreResource;\n}\n\nexport type ErrorModificationType = 'ADD' | 'REMOVE' | 'SET';\n\nexport interface ModifyStoreResourceErrorsPayload {\n  resourceId: ResourceIdentifier;\n  errors: Array<ResourceError>;\n  modificationType: ErrorModificationType;\n}\n\nexport interface Payload {\n  jsonApiData?: Document;\n  query?: Query;\n}\n\n/**\n * Specifies a GET query with parameters.\n */\nexport interface Query {\n\n  /**\n   * Uniquely identifies the query in the store\n   */\n  queryId?: string;\n\n  /**\n   * resource type to query.\n   */\n  type?: string;\n\n  /**\n   * resource id to query.\n   */\n  id?: string;\n\n  /**\n   * sorting, filtering, etc. parameters.\n   */\n  params?: QueryParams;\n}\n\nexport interface QueryParams {\n  filtering?: Array<FilteringParam>;\n  sorting?: Array<SortingParam>;\n  include?: Array<string>;\n  fields?: Array<string>;\n  offset?: number;\n  limit?: number;\n  page?: QueryPageParams;\n}\n\nexport interface QueryPageParams {\n  [id: string]: string | number;\n  offset?: number;\n  limit?: number;\n  number?: number;\n  size?: number;\n}\n\n/**\n * Represents a resource obtained from the server.\n */\nexport interface Resource extends ResourceIdentifier {\n  attributes?: { [key: string]: any };\n  relationships?: { [key: string]: ResourceRelationship };\n  meta?: any;\n  isMetaOnly?: boolean;\n  links?: any;\n}\n\nexport interface ResourceAttributeDefinition {\n  apiName?: string;\n}\n\nexport interface ResourceDefinition {\n  type: string;\n  collectionPath: string;\n  attributes?: { [key: string]: ResourceAttributeDefinition };\n  relationships?: { [key: string]: ResourceRelationDefinition };\n}\n\nexport interface ResourceError {\n  id?: string;\n  links?: any;\n  status?: string;\n  code?: string;\n  title?: string;\n  detail?: string;\n  source?: ResourceErrorSource;\n  meta?: any;\n}\n\nexport interface ResourceErrorSource {\n  pointer?: string;\n  parameter?: string;\n}\n\nexport interface ResourceIdentifier {\n  type: string;\n  id: string;\n}\n\nexport interface ResourceRelationship {\n  data?: any;\n  links?: any;\n  reference?: any;\n}\n\nexport interface ResourceRelationDefinition {\n  type: string;\n  relationType: ResourceRelationType;\n}\n\nexport type ResourceRelationType = 'hasOne' | 'hasMany';\n\nexport type ResourceState =\n  | 'NEW'\n  | 'IN_SYNC'\n  | 'CREATED'\n  | 'UPDATED'\n  | 'DELETED'\n  | 'NOT_LOADED';\n\nexport interface SortingParam {\n  api: string;\n  direction: Direction;\n}\n\nexport interface QueryResult extends StoreQuery {\n\n  /**\n   * Holds the resources from the query results. The field is dynamically populated by denormalizing\n   * StoreQuery.queryResults with the corresponding resources from the store.\n   */\n  data?: StoreResource | Array<StoreResource>;\n}\n\nexport interface ManyQueryResult extends QueryResult {\n  data?: Array<StoreResource>;\n}\n\nexport interface OneQueryResult extends QueryResult {\n  data?: StoreResource;\n}\n\nexport interface StoreQuery {\n  /**\n   * query parameter\n   */\n  query: Query;\n\n  /**\n   * Whether data is fetched from the server.\n   */\n  loading: boolean;\n\n  /**\n   * Ordered list of result identifiers that can be used to fetch the actual resources from the store.\n   */\n  resultIds?: Array<ResourceIdentifier>;\n\n  /**\n   * Meta information obtained along with the results\n   */\n  meta?: any;\n\n  /**\n   * Links information obtained along with the results.\n   */\n  links?: any;\n\n  /**\n   * Errors received from the server after attempting to perform a GET request. Errors related to POST, PATCH and\n   * DELETE are added to StoreResource.\n   */\n  errors: Array<ResourceError>;\n}\n\n/**\n * Container to hold a Resource in the store with state information.\n */\nexport interface StoreResource extends Resource {\n  /**\n   * State of the resource to track local changes not yet\n   * published to the json api endpoint.\n   */\n  state?: ResourceState;\n  /**\n   * The original resource obtained from the server.\n   */\n  persistedResource?: Resource;\n  /**\n   * One of the operation types: reading, creating, updating or deleting.\n   */\n  loading?: OperationType;\n  /**\n   * Errors received from the server after attempting to store the resource.\n   */\n  errors?: Array<ResourceError>;\n\n  /**\n   * new resources may only obtain an id when posted to the server. Till that point\n   * a StoreResource can assign make use of a temporary id and signal this by setting\n   * this flag to true. The id will not be transmitted to the server and the resource\n   * is removed from its temporary location (given by its id) as soon as it is posted\n   * to the server.\n   */\n  hasTemporaryId?: boolean;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Action } from '@ngrx/store';\n\nimport {\n  Payload,\n  Resource,\n  ResourceIdentifier,\n  Query,\n  ModifyStoreResourceErrorsPayload,\n} from './interfaces';\n\nexport const NgrxJsonApiActionTypes = {\n  API_POST_INIT: '[NgrxJsonApi] API_POST_INIT',\n  API_POST_SUCCESS: '[NgrxJsonApi] API_POST_SUCCESS',\n  API_POST_FAIL: '[NgrxJsonApi] API_POST_FAIL',\n  API_GET_INIT: '[NgrxJsonApi] API_GET_INIT',\n  API_GET_SUCCESS: '[NgrxJsonApi] API_GET_SUCCESS',\n  API_GET_FAIL: '[NgrxJsonApi] API_GET_FAIL',\n  API_PATCH_INIT: '[NgrxJsonApi] API_PATCH_INIT',\n  API_PATCH_SUCCESS: '[NgrxJsonApi] API_PATCH_SUCCESS',\n  API_PATCH_FAIL: '[NgrxJsonApi] API_PATCH_FAIL',\n  API_DELETE_INIT: '[NgrxJsonApi] API_DELETE_INIT',\n  API_DELETE_SUCCESS: '[NgrxJsonApi] API_DELETE_SUCCESS',\n  API_DELETE_FAIL: '[NgrxJsonApi] API_DELETE_FAIL',\n  API_APPLY_INIT: '[NgrxJsonApi] API_APPLY_INIT',\n  API_APPLY_SUCCESS: '[NgrxJsonApi] API_APPLY_SUCCESS',\n  API_APPLY_FAIL: '[NgrxJsonApi] API_APPLY_FAIL',\n  API_ROLLBACK: '[NgrxJsonApi] API_ROLLBACK',\n  API_QUERY_REFRESH: '[NgrxJsonApi] API_QUERY_REFRESH',\n  LOCAL_QUERY_INIT: '[NgrxJsonApi] LOCAL_QUERY_INIT',\n  LOCAL_QUERY_SUCCESS: '[NgrxJsonApi] LOCAL_QUERY_SUCCESS',\n  LOCAL_QUERY_FAIL: '[NgrxJsonApi] LOCAL_QUERY_FAIL',\n  DELETE_STORE_RESOURCE: '[NgrxJsonApi] DELETE_STORE_RESOURCE',\n  PATCH_STORE_RESOURCE: '[NgrxJsonApi] PATCH_STORE_RESOURCE',\n  NEW_STORE_RESOURCE: '[NgrxJsonApi] NEW_STORE_RESOURCE',\n  POST_STORE_RESOURCE: '[NgrxJsonApi] POST_STORE_RESOURCE',\n  MODIFY_STORE_RESOURCE_ERRORS: '[NgrxJsonApi] MODIFY_STORE_RESOURCE_ERRORS',\n  REMOVE_QUERY: '[NgrxJsonApi] REMOVE_QUERY',\n  COMPACT_STORE: '[NgrxJsonApi] COMPACT_STORE',\n  CLEAR_STORE: '[NgrxJsonApi] CLEAR_STORE',\n};\n\nexport interface ApiApplyInitPayload {\n  /**\n   * optional list of resource identifiers to perform apply. If not specified all change will be applied\n   * to the backend.\n   */\n  ids?: Array<ResourceIdentifier>;\n\n  /**\n   * if the apply action is restricted to a set of resources with the ids parameter. The include flag allows to\n   * specify which relationships to apply as well. Nested relationships are separated by a dot.\n   */\n  include?: Array<string>;\n}\n\nexport interface ApiApplyRollbackPayload extends ApiApplyInitPayload {}\n\nexport abstract class NgrxJsonApiAction implements Action {\n  abstract zoneId?: string;\n  abstract type: string;\n  constructor() {}\n}\n\nexport class ApiApplyInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_INIT;\n  constructor(public payload: ApiApplyInitPayload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiApplySuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_SUCCESS;\n  constructor(public payload: Array<Action>, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiApplyFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_APPLY_FAIL;\n  constructor(public payload: Array<Action>, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiPostInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_INIT;\n  constructor(public payload: Resource, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiPostSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_SUCCESS;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiPostFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_POST_FAIL;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiDeleteInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_INIT;\n  constructor(public payload: ResourceIdentifier, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiDeleteSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_SUCCESS;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiDeleteFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_DELETE_FAIL;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiGetInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_INIT;\n  constructor(public payload: Query, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiGetSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_SUCCESS;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiGetFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_GET_FAIL;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiRollbackAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_ROLLBACK;\n  constructor(public payload: ApiApplyRollbackPayload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiPatchInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_INIT;\n  constructor(public payload: Resource, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiPatchSuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_SUCCESS;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiPatchFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_PATCH_FAIL;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class DeleteStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.DELETE_STORE_RESOURCE;\n  constructor(public payload: ResourceIdentifier, public zoneId: string) {\n    super();\n  }\n}\n\nexport class PatchStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.PATCH_STORE_RESOURCE;\n  constructor(public payload: Resource, public zoneId: string) {\n    super();\n  }\n}\n\nexport class NewStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.NEW_STORE_RESOURCE;\n  constructor(public payload: Resource, public zoneId: string) {\n    super();\n  }\n}\n\nexport class PostStoreResourceAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.POST_STORE_RESOURCE;\n  constructor(public payload: Resource, public zoneId: string) {\n    super();\n  }\n}\n\nexport class RemoveQueryAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.REMOVE_QUERY;\n  constructor(public payload: string, public zoneId: string) {\n    super();\n  }\n}\n\nexport class LocalQueryInitAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_INIT;\n  constructor(public payload: Query, public zoneId: string) {\n    super();\n  }\n}\n\nexport class LocalQuerySuccessAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_SUCCESS;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class LocalQueryFailAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.LOCAL_QUERY_FAIL;\n  constructor(public payload: Payload, public zoneId: string) {\n    super();\n  }\n}\n\nexport class CompactStoreAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.COMPACT_STORE;\n  constructor(public zoneId: string) {\n    super();\n  }\n}\n\nexport class ClearStoreAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.CLEAR_STORE;\n  constructor(public zoneId: string) {\n    super();\n  }\n}\n\nexport class ApiQueryRefreshAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.API_QUERY_REFRESH;\n  constructor(public payload: string, public zoneId: string) {\n    super();\n    if (!payload) {\n      throw new Error('no query id provided for ApiQueryRefreshAction');\n    }\n  }\n}\n\nexport class ModifyStoreResourceErrorsAction extends NgrxJsonApiAction {\n  readonly type = NgrxJsonApiActionTypes.MODIFY_STORE_RESOURCE_ERRORS;\n  constructor(\n    public payload: ModifyStoreResourceErrorsPayload,\n    public zoneId: string\n  ) {\n    super();\n  }\n}\n\nexport type NgrxJsonApiActions =\n  | ApiApplyInitAction\n  | ApiApplySuccessAction\n  | ApiApplyFailAction\n  | ApiPostInitAction\n  | ApiPostSuccessAction\n  | ApiPostFailAction\n  | ApiDeleteInitAction\n  | ApiDeleteSuccessAction\n  | ApiDeleteFailAction\n  | ApiGetInitAction\n  | ApiGetSuccessAction\n  | ApiGetFailAction\n  | ApiRollbackAction\n  | ApiPatchInitAction\n  | ApiPatchSuccessAction\n  | ApiPatchFailAction\n  | DeleteStoreResourceAction\n  | PatchStoreResourceAction\n  | PostStoreResourceAction\n  | NewStoreResourceAction\n  | RemoveQueryAction\n  | ApiQueryRefreshAction\n  | LocalQueryInitAction\n  | LocalQuerySuccessAction\n  | LocalQueryFailAction\n  | ModifyStoreResourceErrorsAction\n  | CompactStoreAction\n  | ClearStoreAction;\n","import * as _ from 'lodash';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/finally';\n\nimport { Store } from '@ngrx/store';\n\nimport {\n  selectManyQueryResult,\n  selectNgrxJsonApiDefaultZone,\n  selectNgrxJsonApiZone,\n  selectOneQueryResult,\n  selectStoreResource,\n  selectStoreResources,\n} from './selectors';\nimport {\n  ApiApplyInitAction,\n  ApiDeleteInitAction,\n  ApiGetInitAction,\n  ApiPatchInitAction,\n  ApiPostInitAction,\n  ApiQueryRefreshAction,\n  ClearStoreAction,\n  CompactStoreAction,\n  DeleteStoreResourceAction,\n  LocalQueryInitAction,\n  ModifyStoreResourceErrorsAction,\n  NewStoreResourceAction,\n  PatchStoreResourceAction,\n  PostStoreResourceAction,\n  RemoveQueryAction,\n} from './actions';\nimport {\n  ManyQueryResult,\n  NGRX_JSON_API_DEFAULT_ZONE,\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  OneQueryResult,\n  Query,\n  QueryResult,\n  Resource,\n  ResourceError,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\nimport {\n  denormaliseStoreResource,\n  denormaliseStoreResources,\n  getDenormalisedPath,\n  getDenormalisedValue,\n  uuid,\n} from './utils';\n\nexport interface FindOptions {\n  query: Query;\n  fromServer?: boolean;\n  denormalise?: boolean;\n}\n\nexport interface PutQueryOptions {\n  query: Query;\n  fromServer?: boolean;\n}\n\nexport interface PostResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface PatchResourceOptions {\n  resource: Resource;\n  toRemote?: boolean;\n}\n\nexport interface NewResourceOptions {\n  resource: Resource;\n}\n\nexport interface DeleteResourceOptions {\n  resourceId: ResourceIdentifier;\n  toRemote?: boolean;\n}\n\n/**\n * This internface is deprecated, do no longer use.\n */\nexport interface Options {\n  query?: Query;\n  denormalise?: boolean;\n  fromServer?: boolean;\n  resource?: Resource;\n  toRemote?: boolean;\n  resourceId?: ResourceIdentifier;\n}\n\n/**\n * Represents an isolated area in the store with its own set of resources and queries.\n * 'api' is the default zone that already historically has been put beneath NgrxJsonApi within the store.\n */\nexport class NgrxJsonApiZoneService {\n  constructor(protected zoneId: string, protected store: Store<any>) {}\n\n  /**\n   * Adds the given query to the store. Any existing query with the same queryId is replaced.\n   * Make use of selectResults(...) to fetch the data.\n\n   * @param query\n   * @param fromServer\n   */\n  public putQuery(options: PutQueryOptions) {\n    let query = options.query;\n    let fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n\n    if (!query.queryId) {\n      throw new Error('to query must have a queryId');\n    }\n\n    if (fromServer) {\n      this.store.dispatch(new ApiGetInitAction(query, this.zoneId));\n    } else {\n      this.store.dispatch(new LocalQueryInitAction(query, this.zoneId));\n    }\n  }\n\n  public refreshQuery(queryId: string) {\n    this.store.dispatch(new ApiQueryRefreshAction(queryId, this.zoneId));\n  }\n\n  public removeQuery(queryId: string) {\n    this.store.dispatch(new RemoveQueryAction(queryId, this.zoneId));\n  }\n\n  /**\n   * Selects the data of the given query.\n   *\n   * @param queryId\n   * @returns observable holding the data as array of resources.\n   */\n  public selectManyResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<ManyQueryResult> {\n    return this.store\n      .let(selectNgrxJsonApiZone(this.zoneId))\n      .let(selectManyQueryResult(queryId, denormalize));\n  }\n\n  /**\n   * Selects the data of the given query.\n   *\n   * @param queryId\n   * @returns observable holding the data as array of resources.\n   */\n  public selectOneResults(\n    queryId: string,\n    denormalize = false\n  ): Observable<OneQueryResult> {\n    return this.store\n      .let(selectNgrxJsonApiZone(this.zoneId))\n      .let(selectOneQueryResult(queryId, denormalize));\n  }\n\n  /**\n   * @param identifier of the resource\n   * @returns observable of the resource\n   */\n  public selectStoreResource(\n    identifier: ResourceIdentifier\n  ): Observable<StoreResource> {\n    return this.store\n      .let(selectNgrxJsonApiZone(this.zoneId))\n      .let(selectStoreResource(identifier));\n  }\n\n  /**\n   * @param identifiers of the resources\n   * @returns observable of the resources\n   */\n  public selectStoreResources(\n    identifiers: ResourceIdentifier[]\n  ): Observable<StoreResource[]> {\n    return this.store\n      .let(selectNgrxJsonApiZone(this.zoneId))\n      .let(selectStoreResources(identifiers));\n  }\n\n  /**\n   * Updates the given resource in the store with the provided data.\n   * Use commit() to send the changes to the remote JSON API endpoint.\n   *\n   * @param resource\n   */\n  public patchResource(options: PatchResourceOptions) {\n    let resource = options.resource;\n    let toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPatchInitAction(resource, this.zoneId));\n    } else {\n      this.store.dispatch(new PatchStoreResourceAction(resource, this.zoneId));\n    }\n  }\n\n  /**\n   * Creates a new resources that is hold locally in the store\n   * and my later be posted.\n   *\n   * @param resource\n   */\n  public newResource(options: NewResourceOptions) {\n    let resource = options.resource;\n    this.store.dispatch(new NewStoreResourceAction(resource, this.zoneId));\n  }\n\n  /**\n   * Adds the given resource to the store. Any already existing\n   * resource with the same id gets replaced. Use commit() to send\n   * the changes to the remote JSON API endpoint.\n   *\n   * @param resource\n   */\n  public postResource(options: PostResourceOptions) {\n    let resource = options.resource;\n    let toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiPostInitAction(resource, this.zoneId));\n    } else {\n      this.store.dispatch(new PostStoreResourceAction(resource, this.zoneId));\n    }\n  }\n\n  /**\n   * Marks the given resource for deletion.\n   *\n   * @param resourceId\n   */\n  public deleteResource(options: DeleteResourceOptions) {\n    let resourceId = options.resourceId;\n    let toRemote = _.isUndefined(options.toRemote) ? false : options.toRemote;\n\n    if (toRemote) {\n      this.store.dispatch(new ApiDeleteInitAction(resourceId, this.zoneId));\n    } else {\n      this.store.dispatch(\n        new DeleteStoreResourceAction(resourceId, this.zoneId)\n      );\n    }\n  }\n\n  /**\n   * Applies all pending changes to the remote JSON API endpoint.\n   */\n  public apply() {\n    this.store.dispatch(new ApiApplyInitAction({}, this.zoneId));\n  }\n\n  /**\n   * Clear all the contents from the store.\n   */\n  public clear() {\n    this.store.dispatch(new ClearStoreAction(this.zoneId));\n  }\n\n  /**\n   * Compacts the store by removing unreferences and unchanges resources.\n   */\n  public compact() {\n    this.store.dispatch(new CompactStoreAction(this.zoneId));\n  }\n\n  /**\n   * Adds the given errors to the resource with the given id.\n   * @param id\n   * @param errors\n   */\n  public addResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction(\n        {\n          resourceId: id,\n          errors: errors,\n          modificationType: 'ADD',\n        },\n        this.zoneId\n      )\n    );\n  }\n\n  /**\n   * Removes the given errors to the resource with the given id.\n   * @param id\n   * @param errors\n   */\n  public removeResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction(\n        {\n          resourceId: id,\n          errors: errors,\n          modificationType: 'REMOVE',\n        },\n        this.zoneId\n      )\n    );\n  }\n\n  /**\n   * Sets the given errors to the resource with the given id.\n   * @param id\n   * @param errors\n   */\n  public setResourceErrors(\n    id: ResourceIdentifier,\n    errors: Array<ResourceError>\n  ) {\n    this.store.dispatch(\n      new ModifyStoreResourceErrorsAction(\n        {\n          resourceId: id,\n          errors: errors,\n          modificationType: 'SET',\n        },\n        this.zoneId\n      )\n    );\n  }\n}\n\nexport class NgrxJsonApiService extends NgrxJsonApiZoneService {\n  private test = true;\n\n  /**\n   * Keeps current snapshot of the store to allow fast access to resources.\n   */\n  private _storeSnapshot: NgrxJsonApiStore;\n\n  constructor(store: Store<any>, private config: NgrxJsonApiConfig) {\n    super(NGRX_JSON_API_DEFAULT_ZONE, store);\n  }\n\n  public getDefaultZone(): NgrxJsonApiZoneService {\n    return this;\n  }\n\n  public getZone(zoneId: string): NgrxJsonApiZoneService {\n    return new NgrxJsonApiZoneService(zoneId, this.store);\n  }\n\n  public findOne(options: FindOptions): Observable<OneQueryResult> {\n    return <Observable<OneQueryResult>>this.findInternal(options, false);\n  }\n\n  public findMany(options: FindOptions): Observable<ManyQueryResult> {\n    return <Observable<ManyQueryResult>>this.findInternal(options, true);\n  }\n\n  public get storeSnapshot() {\n    if (!this._storeSnapshot) {\n      this.store\n        .let(selectNgrxJsonApiDefaultZone())\n        .subscribe(it => (this._storeSnapshot = it as NgrxJsonApiStore));\n\n      if (!this._storeSnapshot) {\n        throw new Error('failed to initialize store snapshot');\n      }\n    }\n    return this._storeSnapshot;\n  }\n\n  private findInternal(\n    options: FindOptions,\n    multi: boolean\n  ): Observable<QueryResult> {\n    let query = options.query;\n    let fromServer = _.isUndefined(options.fromServer)\n      ? true\n      : options.fromServer;\n    let denormalise = _.isUndefined(options.denormalise)\n      ? false\n      : options.denormalise;\n\n    let newQuery: Query;\n    if (!query.queryId) {\n      newQuery = { ...query, queryId: this.uuid() };\n    } else {\n      newQuery = query;\n    }\n\n    this.putQuery({ query: newQuery, fromServer });\n    let queryResult$: Observable<QueryResult>;\n    if (multi) {\n      queryResult$ = this.selectManyResults(newQuery.queryId, denormalise);\n    } else {\n      queryResult$ = this.selectOneResults(newQuery.queryId, denormalise);\n    }\n    return <Observable<QueryResult>>queryResult$.finally(() =>\n      this.removeQuery(newQuery.queryId)\n    );\n  }\n\n  private uuid() {\n    return uuid();\n  }\n\n  /**\n   * Gets the current persisted state of the given resources.\n   * Consider the use of selectResource(...) to get an observable of the resource.\n   *\n   * @param identifier\n   */\n  public getPersistedResourceSnapshot(identifier: ResourceIdentifier) {\n    let snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id].persistedResource;\n    }\n    return null;\n  }\n\n  /**\n   * Gets the current state of the given resources in the store.\n   * Consider the use of selectResource(...) to get an observable of the resource.\n   *\n   * @param identifier\n   */\n  public getResourceSnapshot(identifier: ResourceIdentifier) {\n    let snapshot = this.storeSnapshot;\n    if (\n      snapshot.data[identifier.type] &&\n      snapshot.data[identifier.type][identifier.id]\n    ) {\n      return snapshot.data[identifier.type][identifier.id];\n    }\n    return null;\n  }\n\n  public denormaliseResource(\n    storeResource$: Observable<StoreResource | StoreResource[]>,\n    zoneId: string = this.zoneId\n  ): Observable<StoreResource | StoreResource[]> {\n    return storeResource$.combineLatest(\n      this.store.let(selectNgrxJsonApiZone(zoneId)).map(state => state.data),\n      (\n        storeResource: StoreResource | StoreResource[],\n        storeData: NgrxJsonApiStoreData\n      ) => {\n        if (_.isArray(storeResource)) {\n          return denormaliseStoreResources(\n            storeResource as Array<StoreResource>,\n            storeData\n          );\n        } else {\n          let resource = storeResource as StoreResource;\n          return denormaliseStoreResource(resource, storeData) as StoreResource;\n        }\n      }\n    );\n  }\n\n  public getDenormalisedPath(path: string, resourceType: string): string {\n    let pathSeparator = _.get(\n      this.config,\n      'filteringConfig.pathSeparator'\n    ) as string;\n    return getDenormalisedPath(\n      path,\n      resourceType,\n      this.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n\n  public getDenormalisedValue(path: string, storeResource: StoreResource): any {\n    let pathSeparator = _.get(\n      this.config,\n      'filteringConfig.pathSeparator'\n    ) as string;\n    return getDenormalisedValue(\n      path,\n      storeResource,\n      this.config.resourceDefinitions,\n      pathSeparator\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/let';\n\nimport { NgrxJsonApiService } from './services';\nimport {\n  NGRX_JSON_API_DEFAULT_ZONE,\n  Resource,\n  ResourceIdentifier,\n  StoreResource,\n} from './interfaces';\n\n@Pipe({ name: 'jaSelectStoreResource' })\nexport class SelectStoreResourcePipe implements PipeTransform {\n  constructor(private service: NgrxJsonApiService) {}\n\n  transform(\n    id: ResourceIdentifier,\n    zoneId: string = NGRX_JSON_API_DEFAULT_ZONE\n  ): Observable<StoreResource> {\n    return this.service.getZone(zoneId).selectStoreResource(id);\n  }\n}\n\n@Pipe({ name: 'jaSelectStoreResources' })\nexport class SelectStoreResourcesPipe implements PipeTransform {\n  constructor(private service: NgrxJsonApiService) {}\n\n  transform(\n    ids: ResourceIdentifier[],\n    zoneId: string = NGRX_JSON_API_DEFAULT_ZONE\n  ): Observable<StoreResource[]> {\n    return this.service.getZone(zoneId).selectStoreResources(ids);\n  }\n}\n\n@Pipe({ name: 'denormaliseStoreResource' })\nexport class DenormaliseStoreResourcePipe implements PipeTransform {\n  constructor(private service: NgrxJsonApiService) {}\n\n  transform(\n    obs: Observable<StoreResource | StoreResource[]>,\n    zoneId: string = NGRX_JSON_API_DEFAULT_ZONE\n  ): Observable<StoreResource | StoreResource[]> {\n    return this.service.denormaliseResource(obs, zoneId);\n  }\n}\n\n@Pipe({ name: 'getDenormalisedValue' })\nexport class GetDenormalisedValuePipe implements PipeTransform {\n  constructor(private service: NgrxJsonApiService) {}\n\n  transform(path: string, storeResource: StoreResource): any {\n    return this.service.getDenormalisedValue(path, storeResource);\n  }\n}\n","import * as _ from 'lodash';\n\nimport {\n  HttpHeaders,\n  HttpClient,\n  HttpRequest,\n  // required for building\n  HttpHeaderResponse,\n  HttpProgressEvent,\n  HttpResponse,\n  HttpSentEvent,\n  HttpUserEvent,\n} from '@angular/common/http';\n\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/throw';\n\nimport {\n  Document,\n  NgrxJsonApiConfig,\n  OperationType,\n  ResourceDefinition,\n  Query,\n  QueryParams,\n} from './interfaces';\nimport {\n  generateIncludedQueryParams,\n  generateFieldsQueryParams,\n  generateFilteringQueryParams,\n  generateSortingQueryParams,\n  generateQueryParams,\n} from './utils';\n\nexport class NgrxJsonApi {\n  public headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/vnd.api+json',\n  });\n  public requestUrl: string;\n  public definitions = this.config.resourceDefinitions;\n\n  constructor(private http: HttpClient, public config: NgrxJsonApiConfig) {\n    if (this.config.requestHeaders) {\n      for (let name of _.keys(this.config.requestHeaders)) {\n        const value = this.config.requestHeaders[name];\n        this.headers = this.headers.set(name, value);\n      }\n    }\n  }\n\n  private urlBuilder(query: Query, operation: OperationType) {\n    switch (operation) {\n      case 'GET': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        } else if (query.type) {\n          return this.collectionUrlFor(query.type);\n        }\n      }\n      case 'DELETE': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'PATCH': {\n        if (query.type && query.id) {\n          return this.resourceUrlFor(query.type, query.id);\n        }\n      }\n      case 'POST': {\n        return this.collectionUrlFor(query.type);\n      }\n    }\n  }\n\n  private collectionPathFor(type: string) {\n    // assume that type == collectionPath if not configured otherwise\n    let definition = _.find(this.definitions, { type: type });\n    if (definition) {\n      return `${definition.collectionPath}`;\n    } else {\n      return type;\n    }\n  }\n\n  private collectionUrlFor(type: string) {\n    let collectionPath = this.collectionPathFor(type);\n    return `${this.config.apiUrl}/${collectionPath}`;\n  }\n\n  private resourcePathFor(type: string, id: string) {\n    let collectionPath = this.collectionPathFor(type);\n    return `${collectionPath}/${encodeURIComponent(id)}`;\n  }\n\n  private resourceUrlFor(type: string, id: string) {\n    let resourcePath = this.resourcePathFor(type, id);\n    return `${this.config.apiUrl}/${resourcePath}`;\n  }\n\n  public find(query: Query): Observable<any> {\n    let _generateIncludedQueryParams = generateIncludedQueryParams;\n    let _generateFilteringQueryParams = generateFilteringQueryParams;\n    let _generateFieldsQueryParams = generateFieldsQueryParams;\n    let _generateSortingQueryParams = generateSortingQueryParams;\n    let _generateQueryParams = generateQueryParams;\n\n    if (this.config.hasOwnProperty('urlBuilder')) {\n      let urlBuilder = this.config.urlBuilder;\n\n      if (urlBuilder.generateIncludedQueryParams) {\n        _generateIncludedQueryParams = urlBuilder.generateIncludedQueryParams;\n      }\n      if (urlBuilder.generateFilteringQueryParams) {\n        _generateFilteringQueryParams = urlBuilder.generateFilteringQueryParams;\n      }\n      if (urlBuilder.generateFieldsQueryParams) {\n        _generateFieldsQueryParams = urlBuilder.generateFieldsQueryParams;\n      }\n      if (urlBuilder.generateSortingQueryParams) {\n        _generateSortingQueryParams = urlBuilder.generateSortingQueryParams;\n      }\n      if (urlBuilder.generateQueryParams) {\n        _generateQueryParams = urlBuilder.generateQueryParams;\n      }\n    }\n\n    let queryParams = '';\n    let includedParam = '';\n    let filteringParams = '';\n    let sortingParams = '';\n    let fieldsParams = '';\n    let offsetParams = '';\n    let limitParams = '';\n    let pageParams = '';\n\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (query.hasOwnProperty('params') && !_.isEmpty(query.params)) {\n      if (_.hasIn(query.params, 'include')) {\n        includedParam = _generateIncludedQueryParams(query.params.include);\n      }\n      if (_.hasIn(query.params, 'filtering')) {\n        filteringParams = _generateFilteringQueryParams(query.params.filtering);\n      }\n      if (_.hasIn(query.params, 'sorting')) {\n        sortingParams = _generateSortingQueryParams(query.params.sorting);\n      }\n      if (_.hasIn(query.params, 'fields')) {\n        fieldsParams = _generateFieldsQueryParams(query.params.fields);\n      }\n      if (_.hasIn(query.params, 'limit')) {\n        limitParams = 'page[limit]=' + query.params.limit;\n      }\n      if (_.hasIn(query.params, 'offset')) {\n        offsetParams = 'page[offset]=' + query.params.offset;\n      }\n      if (_.hasIn(query.params, 'page')) {\n        pageParams = _.keys(query.params.page)\n          .map(key => {\n            return `page[${key}]=${query.params.page[key]}`;\n          })\n          .join('&');\n      }\n    }\n    queryParams = _generateQueryParams(\n      includedParam,\n      filteringParams,\n      sortingParams,\n      fieldsParams,\n      offsetParams,\n      limitParams,\n      pageParams\n    );\n\n    let requestOptions = {\n      method: 'GET',\n      url: this.urlBuilder(query, 'GET') + queryParams,\n    };\n\n    return this.request(requestOptions);\n  }\n\n  public create(query: Query, document: Document): Observable<any> {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n\n    let requestOptions = {\n      method: 'POST',\n      url: this.urlBuilder(query, 'POST'),\n      body: JSON.stringify(document),\n    };\n\n    return this.request(requestOptions);\n  }\n\n  public update(query: Query, document: Document): Observable<any> {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    if (typeof document === undefined) {\n      return Observable.throw('Data not found');\n    }\n    let requestOptions = {\n      method: 'PATCH',\n      url: this.urlBuilder(query, 'PATCH'),\n      body: JSON.stringify(document),\n    };\n\n    return this.request(requestOptions);\n  }\n\n  public delete(query: Query): Observable<any> {\n    if (typeof query === undefined) {\n      return Observable.throw('Query not found');\n    }\n\n    let requestOptions = {\n      method: 'DELETE',\n      url: this.urlBuilder(query, 'DELETE'),\n    };\n\n    return this.request(requestOptions);\n  }\n\n  private request(requestOptions: any) {\n    let request: HttpRequest<any>;\n    let newRequestOptions = {\n      ...requestOptions,\n      headers: this.headers,\n      observe: 'response',\n      withCredentials: this.config.requestWithCredentials,\n    };\n\n    if (requestOptions.method === 'GET') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.get(url, init);\n    } else if (requestOptions.method === 'POST') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.post(url, body, init);\n    } else if (requestOptions.method === 'PATCH') {\n      let { method, url, body, ...init } = newRequestOptions;\n      return this.http.patch(url, body, init);\n    } else if (requestOptions.method === 'DELETE') {\n      let { method, url, ...init } = newRequestOptions;\n      return this.http.delete(url, init);\n    }\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\n\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\n\nimport * as _ from 'lodash';\n\nimport { Action, Store } from '@ngrx/store';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\n\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\n\nimport 'rxjs/add/operator/concatAll';\nimport {\n  catchError,\n  concatAll,\n  combineLatest,\n  debounceTime,\n  filter,\n  flatMap,\n  map,\n  mapTo,\n  mergeMap,\n  skip,\n  switchMap,\n  switchMapTo,\n  tap,\n  take,\n  toArray,\n  withLatestFrom,\n  takeWhile,\n  takeUntil,\n} from 'rxjs/operators';\nimport {\n  ApiApplyFailAction,\n  ApiApplyInitAction,\n  ApiApplySuccessAction,\n  ApiDeleteFailAction,\n  ApiDeleteInitAction,\n  ApiDeleteSuccessAction,\n  ApiGetFailAction,\n  ApiGetInitAction,\n  ApiGetSuccessAction,\n  ApiPatchFailAction,\n  ApiPatchInitAction,\n  ApiPatchSuccessAction,\n  ApiPostFailAction,\n  ApiPostInitAction,\n  ApiPostSuccessAction,\n  ApiQueryRefreshAction,\n  LocalQueryFailAction,\n  LocalQueryInitAction,\n  LocalQuerySuccessAction,\n  NgrxJsonApiActionTypes,\n} from './actions';\nimport { NgrxJsonApi } from './api';\nimport {\n  getNgrxJsonApiZone,\n  selectNgrxJsonApiZone,\n  selectStoreResource,\n  selectStoreResourcesOfType,\n} from './selectors';\nimport {\n  NgrxJsonApiConfig,\n  NgrxJsonApiStore,\n  NgrxJsonApiStoreData,\n  NgrxJsonApiStoreResources,\n  OperationType,\n  Payload,\n  Query,\n  Resource,\n  ResourceError,\n  StoreResource,\n} from './interfaces';\nimport {\n  generatePayload,\n  getPendingChanges,\n  sortPendingChanges,\n  filterResources,\n} from './utils';\n\n@Injectable()\nexport class NgrxJsonApiEffects implements OnDestroy {\n  @Effect()\n  createResource$: Observable<Action> = this.actions$.pipe(\n    ofType<ApiPostInitAction>(NgrxJsonApiActionTypes.API_POST_INIT),\n    mergeMap((action: ApiPostInitAction) => {\n      const payload = this.generatePayload(action.payload, 'POST');\n      return this.jsonApi.create(payload.query, payload.jsonApiData).pipe(\n        map(\n          (response: HttpResponse<any>) =>\n            new ApiPostSuccessAction(\n              {\n                jsonApiData: response.body,\n                query: payload.query,\n              },\n              action.zoneId\n            )\n        ),\n        catchError(error =>\n          of(\n            new ApiPostFailAction(\n              this.toErrorPayload(payload.query, error),\n              action.zoneId\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  updateResource$: Observable<Action> = this.actions$.pipe(\n    ofType<ApiPatchInitAction>(NgrxJsonApiActionTypes.API_PATCH_INIT),\n    mergeMap((action: ApiPatchInitAction) => {\n      const payload = this.generatePayload(action.payload, 'PATCH');\n      return this.jsonApi.update(payload.query, payload.jsonApiData).pipe(\n        map(\n          (response: HttpResponse<any>) =>\n            new ApiPatchSuccessAction(\n              {\n                jsonApiData: response.body,\n                query: payload.query,\n              },\n              action.zoneId\n            )\n        ),\n        catchError(error =>\n          of(\n            new ApiPatchFailAction(\n              this.toErrorPayload(payload.query, error),\n              action.zoneId\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  readResource$: Observable<Action> = this.actions$.pipe(\n    ofType<ApiGetInitAction>(NgrxJsonApiActionTypes.API_GET_INIT),\n    mergeMap((action: ApiGetInitAction) => {\n      const query = action.payload;\n      return this.jsonApi.find(query).pipe(\n        map((response: HttpResponse<any>) => response.body),\n        map(\n          data =>\n            new ApiGetSuccessAction(\n              {\n                jsonApiData: data,\n                query: query,\n              },\n              action.zoneId\n            )\n        ),\n        catchError(error =>\n          of(\n            new ApiGetFailAction(\n              this.toErrorPayload(query, error),\n              action.zoneId\n            )\n          )\n        )\n      );\n    })\n  );\n\n  private localQueryInitEventFor(query: Query) {\n    return this.actions$.pipe(\n      ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT),\n      map(action => action as LocalQueryInitAction),\n      filter(action => query.queryId == action.payload.queryId)\n    );\n  }\n\n  private removeQueryEventFor(query: Query) {\n    return this.actions$.pipe(\n      ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.REMOVE_QUERY),\n      map(action => action as LocalQueryInitAction),\n      filter(action => query.queryId == action.payload)\n    );\n  }\n\n  @Effect()\n  queryStore$ = this.actions$.pipe(\n    ofType<LocalQueryInitAction>(NgrxJsonApiActionTypes.LOCAL_QUERY_INIT),\n    mergeMap((action: LocalQueryInitAction) => {\n      const query = action.payload;\n      return this.store\n        .let(selectNgrxJsonApiZone(action.zoneId))\n        .let(this.executeLocalQuery(query))\n        .pipe(\n          map(\n            results =>\n              new LocalQuerySuccessAction(\n                {\n                  jsonApiData: { data: results },\n                  query: query,\n                },\n                action.zoneId\n              )\n          ),\n          catchError(error =>\n            of(\n              new LocalQueryFailAction(\n                this.toErrorPayload(query, error),\n                action.zoneId\n              )\n            )\n          ),\n          takeUntil(this.localQueryInitEventFor(query)),\n          takeUntil(this.removeQueryEventFor(query))\n        );\n    })\n  );\n\n  private executeLocalQuery(query: Query) {\n    return (state$: Observable<NgrxJsonApiStore>) => {\n      let selected$: Observable<any>;\n      if (!query.type) {\n        return state$.map(() => Observable.throw('Unknown query'));\n      } else if (query.type && query.id) {\n        selected$ = state$.let(\n          selectStoreResource({ type: query.type, id: query.id })\n        );\n      } else {\n        selected$ = state$\n          .let(selectStoreResourcesOfType(query.type))\n          .pipe(\n            combineLatest(\n              state$.map(it => it.data),\n              (\n                resources: NgrxJsonApiStoreResources,\n                storeData: NgrxJsonApiStoreData\n              ) =>\n                filterResources(\n                  resources,\n                  storeData,\n                  query,\n                  this.config.resourceDefinitions,\n                  this.config.filteringConfig\n                )\n            )\n          );\n      }\n      return selected$.distinctUntilChanged();\n    };\n  }\n\n  @Effect()\n  deleteResource$ = this.actions$.pipe(\n    ofType<ApiDeleteInitAction>(NgrxJsonApiActionTypes.API_DELETE_INIT),\n    mergeMap((action: ApiDeleteInitAction) => {\n      const payload = this.generatePayload(action.payload, 'DELETE');\n      return this.jsonApi.delete(payload.query).pipe(\n        map((response: HttpResponse<any>) => response.body),\n        map(\n          data =>\n            new ApiDeleteSuccessAction(\n              {\n                jsonApiData: data,\n                query: payload.query,\n              },\n              action.zoneId\n            )\n        ),\n        catchError(error =>\n          of(\n            new ApiDeleteFailAction(\n              this.toErrorPayload(payload.query, error),\n              action.zoneId\n            )\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  triggerReadOnQueryRefresh$ = this.actions$.pipe(\n    ofType(NgrxJsonApiActionTypes.API_QUERY_REFRESH),\n    withLatestFrom(this.store, (action: ApiQueryRefreshAction, store) => {\n      let queryId = action.payload;\n      let state = getNgrxJsonApiZone(store, action.zoneId);\n      let query = state.queries[queryId].query;\n      return new ApiGetInitAction(query, action.zoneId);\n    })\n  );\n\n  @Effect()\n  refreshQueriesOnDelete$: Observable<Action> = this.actions$.pipe(\n    ofType(NgrxJsonApiActionTypes.API_DELETE_SUCCESS),\n    withLatestFrom(this.store, (action: ApiDeleteSuccessAction, store) => {\n      let id = { id: action.payload.query.id, type: action.payload.query.type };\n      if (!id.id || !id.type) {\n        throw new Error(\n          'API_DELETE_SUCCESS did not carry resource id and type information'\n        );\n      }\n\n      let state = getNgrxJsonApiZone(store, action.zoneId);\n      let actions = [];\n      for (let queryId in state.queries) {\n        if (state.queries.hasOwnProperty(queryId)) {\n          let query = state.queries[queryId];\n          if (query.resultIds) {\n            let needsRefresh =\n              _.findIndex(query.resultIds, function(o) {\n                return _.isEqual(id, o);\n              }) !== -1;\n\n            let sameIdRequested =\n              query.query.id === id.id && query.query.type === id.type;\n            if (sameIdRequested && (needsRefresh || _.isEmpty(query.errors))) {\n              throw new Error(\n                'store is in invalid state, queries for deleted' +\n                  ' resource should have been emptied and marked with 404 error'\n              );\n            }\n\n            if (needsRefresh) {\n              actions.push(new ApiQueryRefreshAction(queryId, action.zoneId));\n            }\n          }\n        }\n      }\n      return actions;\n    }),\n    flatMap(actions => of(...actions))\n  );\n\n  private handlePendingCreate(pendingChange: StoreResource, zoneId: string) {\n    let payload: Payload = this.generatePayload(pendingChange, 'POST');\n    return this.jsonApi.create(payload.query, payload.jsonApiData).pipe(\n      map(\n        response =>\n          new ApiPostSuccessAction(\n            {\n              jsonApiData: response.body,\n              query: payload.query,\n            },\n            zoneId\n          )\n      ),\n      catchError(error =>\n        of(\n          new ApiPostFailAction(\n            this.toErrorPayload(payload.query, error),\n            zoneId\n          )\n        )\n      )\n    );\n  }\n\n  private handlePendingUpdate(pendingChange: StoreResource, zoneId: string) {\n    let payload: Payload = this.generatePayload(pendingChange, 'PATCH');\n    return this.jsonApi.update(payload.query, payload.jsonApiData).pipe(\n      map(\n        response =>\n          new ApiPatchSuccessAction(\n            {\n              jsonApiData: response.body,\n              query: payload.query,\n            },\n            zoneId\n          )\n      ),\n      catchError(error =>\n        of(\n          new ApiPatchFailAction(\n            this.toErrorPayload(payload.query, error),\n            zoneId\n          )\n        )\n      )\n    );\n  }\n\n  private handlePendingDelete(pendingChange: StoreResource, zoneId: string) {\n    let payload: Payload = this.generatePayload(pendingChange, 'DELETE');\n    return this.jsonApi.delete(payload.query).pipe(\n      map(\n        response =>\n          new ApiDeleteSuccessAction(\n            {\n              jsonApiData: response.body,\n              query: payload.query,\n            },\n            zoneId\n          )\n      ),\n      catchError(error =>\n        of(\n          new ApiDeleteFailAction(\n            this.toErrorPayload(payload.query, error),\n            zoneId\n          )\n        )\n      )\n    );\n  }\n\n  @Effect()\n  applyResources$: Observable<Action> = this.actions$.pipe(\n    ofType(NgrxJsonApiActionTypes.API_APPLY_INIT),\n    filter(() => this.jsonApi.config.applyEnabled !== false),\n    withLatestFrom(\n      this.store,\n      (action: ApiApplyInitAction, storeState: any) => {\n        const ngrxstore = getNgrxJsonApiZone(storeState, action.zoneId);\n        const payload = (action as ApiApplyInitAction).payload;\n        const pending: Array<StoreResource> = getPendingChanges(\n          ngrxstore.data,\n          payload.ids,\n          payload.include\n        );\n\n        if (pending.length === 0) {\n          return of(new ApiApplySuccessAction([], action.zoneId));\n        }\n        const sortedPending = sortPendingChanges(pending);\n        let actions: Array<Observable<Action>> = [];\n        for (let pendingChange of sortedPending) {\n          if (pendingChange.state === 'CREATED') {\n            actions.push(\n              this.handlePendingCreate(pendingChange, action.zoneId)\n            );\n          } else if (pendingChange.state === 'UPDATED') {\n            actions.push(\n              this.handlePendingUpdate(pendingChange, action.zoneId)\n            );\n          } else if (pendingChange.state === 'DELETED') {\n            actions.push(\n              this.handlePendingDelete(pendingChange, action.zoneId)\n            );\n          } else {\n            throw new Error('unknown state ' + pendingChange.state);\n          }\n        }\n        return of(...actions)\n          .concatAll()\n          .pipe(\n            toArray(),\n            map(actions => this.toApplyAction(actions, action.zoneId))\n          );\n      }\n    ),\n    flatMap(actions => actions)\n  );\n\n  private config: NgrxJsonApiConfig;\n\n  constructor(\n    private actions$: Actions,\n    private jsonApi: NgrxJsonApi,\n    private store: Store<any>\n  ) {\n    this.config = this.jsonApi.config;\n  }\n\n  ngOnDestroy() {}\n\n  private toApplyAction(actions: Array<Action>, zoneId: string): any {\n    for (let action of actions) {\n      if (\n        action.type === NgrxJsonApiActionTypes.API_POST_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_PATCH_FAIL ||\n        action.type === NgrxJsonApiActionTypes.API_DELETE_FAIL\n      ) {\n        return new ApiApplyFailAction(actions, zoneId);\n      }\n    }\n    return new ApiApplySuccessAction(actions, zoneId);\n  }\n\n  private toErrorPayload(\n    query: Query,\n    response: HttpErrorResponse | any\n  ): Payload {\n    let contentType: String = null;\n    if (response && response.headers) {\n      contentType = response.headers.get('Content-Type');\n    }\n    let document = null;\n    if (\n      contentType != null &&\n      contentType.startsWith('application/vnd.api+json')\n    ) {\n      document = response;\n    }\n    if (\n      document &&\n      document.error &&\n      document.error.errors &&\n      document.error.errors.length > 0\n    ) {\n      return {\n        query: query,\n        jsonApiData: document.error,\n      };\n    } else {\n      // transform http to json api error\n      let errors: Array<ResourceError> = [];\n      let error: ResourceError = {\n        status: String(response.status),\n        code: response.statusText,\n      };\n\n      errors.push(error);\n      // got json api errors\n\n      return {\n        query: query,\n        jsonApiData: {\n          errors: errors,\n        },\n      };\n    }\n  }\n\n  private generatePayload(\n    resource: Resource,\n    operation: OperationType\n  ): Payload {\n    return generatePayload(resource, operation);\n  }\n}\n"]}